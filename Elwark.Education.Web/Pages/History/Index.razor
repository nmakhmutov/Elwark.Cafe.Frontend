@page "/history"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L
@attribute [Authorize]

<Title Value="@L["History"]"></Title>

@switch (_history.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_history.Error"/>
        break;
        
    case ResponseStatus.Success:
        <div class="ma-5">
            <div class="period-grid">
                @foreach (var period in _history.Data.Periods)
                {
                    <MudCard>
                        <MudCardMedia Image="@(period.Image)" Height="200"/>
                        <MudCardContent>
                            <MudLink Typo="Typo.h5" Href="@(Links.History.Period(period.Type))">
                                @period.Title
                            </MudLink>
                            <MudText Typo="Typo.body2">
                                @TrimDescription(period.Description)
                            </MudText>
                        </MudCardContent>
                    </MudCard>                }
            </div>

            <MudText Typo="Typo.h2" Class="mt-6">
                @L["Articles"]
            </MudText>
            <div class="articles-grid">
                @foreach (var article in _history.Data.Articles)
                {
                    <MudCard>
                        @if (article.Image is not null)
                        {
                            <MudCardMedia Image="@(article.Image)" Height="200"/>                        }
                        <MudCardContent>
                            <MudLink Typo="Typo.h5" Href="@(Links.History.Article(article.ArticleId))">
                                @article.Title
                            </MudLink>
                            <MudText Typo="Typo.body2">
                                @TrimDescription(article.Subtitle)
                            </MudText>
                        </MudCardContent>
                    </MudCard>                }
            </div>
        </div>

        break;
}

@code {
    private ApiResponse<HistoryAggregate> _history = ApiResponse<HistoryAggregate>.Loading();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _history = await HistoryClient.GetAsync();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private static string TrimDescription(string? value)
    {
        if (value is null)
            return string.Empty;

        if (value.Length > 140)
            return value.Substring(0, 140) + "...";

        return value;
    }

}