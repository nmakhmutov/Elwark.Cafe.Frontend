@page "/history/article/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@using Elwark.Education.Web.Gateways.Models.Test
@inject IHistoryClient HistoryClient
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> L
@inject ISnackbar Snackbar
@inject ErrorManager ErrorManager
@inject IDialogService Dialog

@attribute [Authorize]

<ApiResponseViewer Response="@_response">
    <Loading>
        <div class="grid">
            <div class="content">
                <CardsSkeleton Count="1"/>
            </div>
            <div class="image">
                <CardsSkeleton Count="2"/>
            </div>
        </div>

    </Loading>
    <Result Context="article">
        @{ var breadcrumbs = new BreadcrumbsItem[]
           {
               new(L["Subject:History"].Value, Links.History.Index),
               new(L[$"History:{article.Period}"].Value, Links.History.Period(article.Period)),
               new(article.Topic.Title, Links.History.Topic(article.Topic.Id))
           }; }

        <Title Value="@article.Title"/>
        <div class="grid">
            <div class="title">
                <MudText Typo="Typo.h2" Class="mb-3" Align="Align.Center">
                    @article.Title
                </MudText>
                <Breadcrumbs Items="breadcrumbs" Class="mb-6"/>
            </div>
            <div class="content">
                @if (article.Image is not null)
                {
                    <div class="image">
                        <img src="@article.Image" alt="@article.Title"/>
                    </div>
                }
                <MudPaper Class="pa-3">
                    <MarkdownText Text="@article.Text"/>
                </MudPaper>
                <AdjacentArticles Adjacent="@article.Adjacent" Class="my-6" OnPremiumClick="@OnBuyClick"/>
            </div>
            <div class="aside">
                @if (article.Footnotes is not null)
                {
                    <div class="footnotes">
                        <MarkdownText Text="@article.Footnotes"/>
                    </div>
                }
                @if (article.Test is not null)
                {
                    <div class="test">
                        <MudPaper Class="pa-3">
                            <MudText Typo="Typo.h6" Class="mb-3">
                                @L["Test:CheckYourKnowledge"]
                            </MudText>
                            @switch (article.Test.Status)
                            {
                                case PermissionStatus.Allowed when _test?.Status == ResponseStatus.Loading:
                                    <MudButton Variant="Variant.Filled" Class="mb-3 mx-auto d-block" Disabled="true">
                                        <div class="d-flex flex-row align-center">
                                            <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                                            @L["Loading"]
                                        </div>
                                    </MudButton>
                                    break;

                                case PermissionStatus.Allowed:
                                    <MudButton
                                        Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        Class="mb-3 mx-auto d-block"
                                        OnClick="@CreateTestAsync">
                                        @L["Test:PassATest"]
                                    </MudButton>
                                    break;

                                case PermissionStatus.CreatedMaximumTests:
                                case PermissionStatus.ReachedMaximumAnswerAttempts:
                                    <MudText Typo="Typo.body2" Color="Color.Error" Class="mb-3">
                                        @ErrorManager.Localize(article.Test.Status)
                                    </MudText>
                                    <MudButton
                                        Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        Class="mb-3 mx-auto d-block"
                                        OnClick="@OnBuyClick">
                                        @L["Subscription:ChoosePricingPlan"]
                                    </MudButton>
                                    break;

                                default:
                                    <MudText Typo="Typo.body2" Color="Color.Error" Class="mb-3">
                                        @ErrorManager.Localize(article.Test.Status)
                                    </MudText>
                                    break;
                            }
                            <MudText Typo="Typo.body2" Align="Align.Center">
                                @if (article.Test.Progress is not null)
                                {
                                    @L["Test:QuantityCompletedTimes", article.Test.Progress.QuantityCompletedTimes]
                                }
                                else
                                {
                                    @L["Test:NotPassed"]
                                }
                            </MudText>
                        </MudPaper>
                    </div>
                    @if (article.Test.Conclusions.Length > 0)
                    {
                        <div class="conclusions">
                            <ProgresTestConclusionList
                                Conclusions="@article.Test.Conclusions"
                                DetailLinkBuilder="@(id => Links.Profile.TestDetail(SubjectType.History, id))"
                                SeeAllLink="@Links.Profile.Tests(SubjectType.History)"/>
                        </div>
                    }
                }
            </div>
        </div>
    </Result>
</ApiResponseViewer>

@code {
    private ApiResponse<HistoryArticleDetail> _response = ApiResponse<HistoryArticleDetail>.Loading();
    private ApiResponse<TestCreatedResult>? _test;

    [Parameter]
    public string Id { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        _response = ApiResponse<HistoryArticleDetail>.Loading();
        _response = await HistoryClient.GetArticleAsync(Id);
    }

    private async Task CreateTestAsync()
    {
        _test = ApiResponse<TestCreatedResult>.Loading();
        _test = await HistoryClient.CreateTestForArticleAsync(Id);

        if (_test.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.History.Test(_test.Data.Id));
        else
            Snackbar.Add(ErrorManager.Localize(_test.Error).Title, Severity.Error);
    }

    private void OnBuyClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };
        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = SubjectType.History
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

}