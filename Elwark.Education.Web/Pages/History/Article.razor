@page "/history/article/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@using Elwark.Education.Web.Gateways.Models.Test
@inject IHistoryClient HistoryClient
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> L
@inject ISnackbar Snackbar
@inject ErrorManager ErrorManager

@attribute [Authorize]

<ApiResponseViewer Response="@_response">
    <Loading>
        <div class="grid">
            <div class="content">
                <CardsSkeleton Count="1"/>
            </div>
            <div class="aside">
                <CardsSkeleton Count="1"/>
            </div>
            <div class="sidebar">
                <CardsSkeleton Count="1"/>
            </div>
        </div>
    </Loading>
    <Result Context="article">
        @{
            var breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, Links.History.Index),
                new(L[$"History:{article.Period}"].Value, Links.History.Period(article.Period)),
                new(article.Topic.Title, Links.History.Topic(article.Topic.Id))
            };
        }

        <Title Value="@article.Title"/>
        <div class="grid">

            <div class="content">
                <HistoryArticleHeader
                    Breadcrumbs="breadcrumbs"
                    Class="mb-3"
                    Image="@article.Image"
                    Overview="@article.Overview"
                    Title="@article.Title"/>
                <MudPaper Class="pa-3">
                    <MarkdownText Text="@article.Text"/>
                </MudPaper>
            </div>

            <div class="aside">
                <div>
                    <MudCard>
                        <MudCardContent>
                            <RatingButtons
                                Class="mx-auto"
                                Rating="@article.Rating"
                                OnLikeClick="@Like"
                                OnDislikeClick="@Dislike"/>
                        </MudCardContent>
                    </MudCard>
                </div>
                @foreach (var (title, content) in article.InfoBoxes)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.subtitle1">
                                    <strong>@title</strong>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MarkdownText Text="@content"/>
                        </MudCardContent>
                    </MudCard>
                }
                @if (article.Test is not null)
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.subtitle1">
                                    <strong>@L["Test:CheckYourKnowledge"]</strong>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <CreateTestButton
                                Subject="@SubjectType.History"
                                Status="@article.Test.Status"
                                IsLoading="@(_test?.Status == ResponseStatus.Loading)"
                                OnCreateTestClick="@CreateTestAsync"/>
                            <div class="d-flex flex-row justify-space-between flex-wrap mt-6">
                                @if (article.Test.CompletedTimes.Success > 0)
                                {
                                    <MudText Typo="Typo.subtitle1" Class="mr-3">
                                        @L["Test:PassedTimes", article.Test.CompletedTimes.Success.ToReadable()]
                                    </MudText>
                                }
                                @if (article.Test.CompletedTimes.Fail > 0)
                                {
                                    <MudText Typo="Typo.subtitle1">
                                        @L["Test:NotPassedTimes", article.Test.CompletedTimes.Fail.ToReadable()]
                                    </MudText>
                                }
                            </div>
                            @if (article.Test.Conclusions.Length > 0)
                            {
                                <div class="mt-3">
                                    @foreach (var conclusion in article.Test.Conclusions)
                                    {
                                        <TestConclusionOverviewItem
                                            Class="mb-6"
                                            Conclusion="@conclusion"
                                            DetailLinkBuilder="@(id => Links.Profile.TestDetail(SubjectType.History, id))"/>
                                    }
                                    <div class="d-flex flex-row justify-end">
                                        <MudLink Color="Color.Primary" Href="@Links.Profile.Tests(SubjectType.History)">
                                            @L["SeeAll"]
                                        </MudLink>
                                    </div>
                                </div>
                            }
                        </MudCardContent>
                    </MudCard>
                }
            </div>

            <div class="sidebar">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.subtitle1">
                                <strong>@L["Contents"]</strong>
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <TopicContents
                            Class="mx-n4"
                            Contents="@article.Contents"
                            SelectedArticleId="@Id"/>

                    </MudCardContent>
                </MudCard>
            </div>

        </div>
    </Result>
</ApiResponseViewer>

@code {
    private ApiResponse<HistoryArticleDetail> _response = ApiResponse<HistoryArticleDetail>.Loading();
    private ApiResponse<TestCreatedResult>? _test;

    [Parameter]
    public string Id { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        _response = ApiResponse<HistoryArticleDetail>.Loading();
        _response = await HistoryClient.GetArticleAsync(Id);
    }

    private async Task CreateTestAsync()
    {
        _test = ApiResponse<TestCreatedResult>.Loading();
        _test = await HistoryClient.CreateTestForArticleAsync(Id);

        if (_test.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.History.Test(_test.Data.Id));
        else
            Snackbar.Add(ErrorManager.Localize(_test.Error).Title, Severity.Error);
    }

    private async Task<bool> Like()
    {
        var response = await HistoryClient.LikeArticleAsync(Id);
        if (response.Status == ResponseStatus.Success)
            return true;

        Snackbar.Add(ErrorManager.Localize(response.Error).Title, Severity.Error);
        return false;
    }

    private async Task<bool> Dislike()
    {
        var response = await HistoryClient.DislikeArticleAsync(Id);
        if (response.Status == ResponseStatus.Success)
            return true;

        Snackbar.Add(ErrorManager.Localize(response.Error).Title, Severity.Error);
        return false;
    }

}
