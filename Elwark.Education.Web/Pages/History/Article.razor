@page "/history/article/{id}"
@using Elwark.Education.Web.Services.History.Model
@inject IHistoryService HistoryService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> L

@attribute [Authorize]

@if (_article is null)
{
    <PageLoader/>    
}
else if (_isTestCreating)
{
    <PageLoader Title="@(L["TestCreating"] + "...")"/>    
}
else
{
    <Title Value="@_article.Title"></Title>
    <MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
        <MudGrid Spacing="0">
            <MudItem xs="12" md="7" lg="8" xl="6" Style="min-height: 100%">
                <MudPaper Square="true" Class="pa-6" Style="min-height: calc(100vh - 64px)">
                    <Breadcrumbs Items="_breadcrumbs" Class="mb-6"/>
                    <MudText Typo="Typo.h2" Class="mb-6">@_article.Title</MudText>
                    @if (_article.IsAvailableTest)
                    {
                        <MudButton
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            Class="mb-6"
                            OnClick="@CreateTestAsync"
                            Disabled="_isTestCreating">
                            @L["Test"]
                        </MudButton>                    }
                    @if (_article.Subtitle is not null)
                    {
                        <MudText Typo="Typo.subtitle1" Class="mb-6">
                            @_article.Subtitle
                        </MudText>                    }
                    <div class="content">
                        @((MarkupString) Markdig.Markdown.ToHtml(_article.Text))
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="5" lg="4" xl="3">
                @if (_article.Image is not null)
                {
                    <div class="image" style="background-image: url(@_article.Image)"></div>
                }
                <div class="content pa-6">
                    @((MarkupString) Markdig.Markdown.ToHtml(_article.Footnotes))
                </div>
            </MudItem>
        </MudGrid>
    </MudContainer>}

@code {
    private HistoryArticleModel? _article;
    private bool _isTestCreating = false;

    [Parameter]
    public string Id { get; set; } = default!;

    private BreadcrumbsItem[] _breadcrumbs = Array.Empty<BreadcrumbsItem>();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _article = await HistoryService.GetArticleAsync(Id);
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
            return;
        }

        if (_article is not null)
            _breadcrumbs = new BreadcrumbsItem[]
            {
                new(L["History"].Value, Links.History.Index),
                new(_article.Period.Title, Links.History.Period(_article.Period.Type)),
                new(_article.Topic.Title, Links.History.Topic(_article.Topic.Id))
            };
    }

    private async Task CreateTestAsync()
    {
        _isTestCreating = true;
        var result = await HistoryService.CreateTestForArticleAsync(Id);
        if (result is not null)
            NavigationManager.NavigateTo(Links.History.Test(result.TestId));

        _isTestCreating = false;
    }

}