@page "/history/topics/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@inject IHistoryClient HistoryClient
@inject IDialogService Dialog
@inject IStringLocalizer<App> L

@attribute [Authorize]

<ApiResponseViewer Response="@_topic">
    <Loading>
        <PageLoader/>
    </Loading>
    <Result Context="topic">
        <Title Value="@topic.Title"/>

        @switch (topic)
        {
            case HistoryPersonTopicDetail x:
                <PersonHeader
                    Title="@x.Title"
                    Description="@x.Description"
                    Image="@x.Image"
                    Born="@x.Born"
                    Died="@x.Died"
                    Characteristics="@x.Characteristics"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case HistoryEventTopicDetail x:
                <EventHeader
                    Title="@x.Title"
                    Description="@x.Description"
                    Image="@x.Image"
                    Started="@x.Started"
                    Ended="@x.Ended"
                    Breadcrumbs="@_breadcrumbs"/>
                break;
        }

        <Content
            Id="@topic.Id"
            Chapters="@topic.Chapters"
            Test="@topic.Test"
            InfoBoxes="@topic.InfoBoxes"
            Rating="@topic.Rating"
            IsFavorite="@topic.IsFavorite"
            OnFavoriteClick="@OnFavoriteClick"
            OnLikeClick="@OnLikeClick"
            OnDislikeClick="@OnDislikeClick"/>

        @if (topic.RelatedTopics.Length > 0)
        {
            <RelatedTopics Class="ma-3 ma-lg-6" Topics="@topic.RelatedTopics" OnFavoriteClick="@OnFavoriteClick"/>
        }
    </Result>
</ApiResponseViewer>


@code {
    private ApiResponse<HistoryTopicDetail> _topic = ApiResponse<HistoryTopicDetail>.Loading();

    private List<BreadcrumbItem> _breadcrumbs = new();

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _topic = ApiResponse<HistoryTopicDetail>.Loading();
        _topic = await HistoryClient.Topic.GetAsync(Id);

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, Links.History.Index),
                new(L[$"History:{_topic.Data.Period}"].Value, Links.History.Period(_topic.Data.Period))
            };
    }

    private void OnPremiumClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };
        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = SubjectType.History
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }


    private async Task<bool> OnLikeClick()
    {
        var response = await HistoryClient.Topic.LikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    private async Task<bool> OnDislikeClick()
    {
        var response = await HistoryClient.Topic.DislikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

}
