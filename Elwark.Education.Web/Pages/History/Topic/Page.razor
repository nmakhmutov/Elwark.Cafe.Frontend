@page "/history/topics/{id}"

@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.History.Topic
@using Elwark.Education.Web.Gateways.Models.Test

@inject IHistoryClient HistoryClient
@inject IDialogService Dialog
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ErrorManager ErrorManager
@inject IStringLocalizer<App> L

@attribute [Authorize]

<ApiResponseViewer Response="@_topic">
    <Placeholder>
        <PageLoader/>
    </Placeholder>
    <Result Context="result">
        <Title Value="@result.Topic.Title"/>

        @switch (result.Topic)
        {
            case PersonTopicDetail x:
                <PersonHeader
                    Title="@x.Title"
                    Description="@x.Description"
                    Image="@x.Image"
                    Born="@x.Born"
                    Died="@x.Died"
                    Characteristics="@x.Characteristics"
                    Breadcrumbs="@_breadcrumbs"/>
                break;

            case EventTopicDetail x:
                <EventHeader
                    Title="@x.Title"
                    Description="@x.Description"
                    Image="@x.Image"
                    Started="@x.Started"
                    Ended="@x.Ended"
                    Breadcrumbs="@_breadcrumbs"/>
                break;
        }

        <div class="topic">
            <MudPaper Class="pa-3">
                @foreach (var (title, subtitle, content) in result.Topic.Chapters)
                {
                    <article class="mb-6 mb-sm-12">
                        <div class="mb-6">
                            <h2 class="chapter-title">
                                @title
                            </h2>
                            @if (!string.IsNullOrEmpty(subtitle))
                            {
                                <h3 class="chapter-subtitle">
                                    @subtitle
                                </h3>
                            }
                        </div>
                        <MarkdownText Text="@content"/>
                    </article>
                }
            </MudPaper>

            <aside>
                <div class="sidebar-container">
                    <MudPaper Class="pa-3">
                        <TopicReactionButtons
                            Id="@Id"
                            IsFavorite="@result.IsFavorite"
                            Rating="@result.Rating"
                            OnFavoriteClick="@OnFavoriteClick"
                            OnLikeClick="@OnLikeClick"
                            OnDislikeClick="@OnDislikeClick"/>
                    </MudPaper>

                    <MudPaper Class="pa-3">
                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                            <strong>@L["Test:CheckYourKnowledge"]</strong>
                        </MudText>
                        <TestButtons
                            Difficulties="@result.Test.Difficulties"
                            Status="@result.Test.Status"
                            Subject="@SubjectType.History"
                            IsLoading="@(_test?.Status == ResponseStatus.Loading)"
                            OnCreateTestClick="@CreateTestAsync"/>
                    </MudPaper>
                </div>
            </aside>

            @if (result.Test.Difficulties.Length > 0)
            {
                <section class="full-row">
                    <MudLink Href="@Links.Profile.Statistics(SubjectType.History)" Typo="Typo.h5" Class="mb-3">
                        @L["Statistics"]
                    </MudLink>
                    <div class="my-3"></div>
                    <MudPaper Class="pa-3">
                        @if (result.Test.Difficulties.Contains(TestDifficulty.Easy))
                        {
                            <div class="mb-3">
                                <MudText Typo="Typo.h6" Class="mb-3">
                                    @L["Tests:Easy"]
                                </MudText>
                                <DefaultFitGrid>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                                            @L["Tests"]
                                        </MudText>
                                        <NumberOfTestList Value="@result.Statistics.EasyTest.NumberOfTests"/>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                                            @L["Score"]
                                        </MudText>
                                        <ScoreList Value="@result.Statistics.EasyTest.Score"/>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                                            @L["Questions"]
                                        </MudText>
                                        <AnswerRatioList Value="@result.Statistics.EasyTest.AnswerRatio"/>
                                    </div>
                                </DefaultFitGrid>
                            </div>
                        }

                        @if (result.Test.Difficulties.Contains(TestDifficulty.Hard))
                        {
                            <div class="mb-3">
                                <MudText Typo="Typo.h6" Class="mb-3">
                                    @L["Tests:Hard"]
                                </MudText>
                                <DefaultFitGrid>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                                            @L["Tests"]
                                        </MudText>
                                        <NumberOfTestList Value="@result.Statistics.HardTest.NumberOfTests"/>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                                            @L["Score"]
                                        </MudText>
                                        <ScoreList Value="@result.Statistics.HardTest.Score"/>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                                            @L["Questions"]
                                        </MudText>
                                        <AnswerRatioList Value="@result.Statistics.HardTest.AnswerRatio"/>
                                    </div>
                                </DefaultFitGrid>
                            </div>
                        }
                    </MudPaper>
                </section>
            }

            @if (result.Statistics.Conclusions.Length > 0)
            {
                <section class="full-row">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Tests:Latest"]
                    </MudText>
                    <DefaultFillGrid>
                        @foreach (var conclusion in result.Statistics.Conclusions)
                        {
                            <MudPaper Class="pa-3">
                                <TestConclusionList
                                    Status="@conclusion.Status"
                                    Difficulty="@conclusion.Difficulty"
                                    CompletedAt="@conclusion.CompletedAt"
                                    TimeSpent="@conclusion.TimeSpent"
                                    TotalScore="@conclusion.TotalScore"/>
                            </MudPaper>
                        }
                    </DefaultFillGrid>
                </section>
            }

            @if (result.RelatedTopics.Length > 0)
            {
                <section class="full-row">
                    <MudText Typo="Typo.h5" Class="mb-3">
                        @L["Topics:Related"]
                    </MudText>
                    <DefaultFillGrid>
                        @foreach (var topic in result.RelatedTopics)
                        {
                            <TopicCard
                                Id="@topic.Id"
                                Href="@Links.History.Topic(topic.Id)"
                                Image="@topic.Image"
                                Title="@topic.Title"
                                Subtitle="@topic.Overview"
                                Rating="@topic.Rating"
                                IsFavorite="@topic.IsFavorite"
                                OnFavoriteClick="@OnFavoriteClick">
                                <ImageFooter>
                                    <HistoryEpochChip Class="ma-0" Epoch="@topic.Epoch"/>
                                </ImageFooter>
                            </TopicCard>
                        }
                    </DefaultFillGrid>
                </section>
            }
        </div>
    </Result>
</ApiResponseViewer>


@code {
    private ApiResponse<TestCreatedResult>? _test;
    private ApiResponse<TopicDetailComposition> _topic = ApiResponse<TopicDetailComposition>.Loading();

    private List<BreadcrumbItem> _breadcrumbs = new();

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _topic = ApiResponse<TopicDetailComposition>.Loading();
        _topic = await HistoryClient.Topic.GetAsync(Id);

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, Links.History.Index),
                new(L[$"History:{_topic.Data.Topic.Epoch}"].Value, Links.History.Epoch(_topic.Data.Topic.Epoch))
            };
    }

    private async Task CreateTestAsync(TestDifficulty difficulty)
    {
        _test = ApiResponse<TestCreatedResult>.Loading();
        _test = await HistoryClient.Topic.CreateTestAsync(Id, difficulty);

        if (_test.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.History.Test(_test.Data.Id));
        else
            Snackbar.Add(ErrorManager.Localize(_test.Error).Title, Severity.Error);
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }


    private async Task<bool> OnLikeClick()
    {
        var response = await HistoryClient.Topic.LikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    private async Task<bool> OnDislikeClick()
    {
        var response = await HistoryClient.Topic.DislikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

}
