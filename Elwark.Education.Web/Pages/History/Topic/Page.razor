@page "/history/topics/{id}"

@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.History.Topic
@using Elwark.Education.Web.Gateways.Models.Test

@attribute [Authorize]

<ApiResponseViewer Response="@_topic">
<Placeholder>
    <PageLoader/>
</Placeholder>
<Result Context="result">
<Title Value="@result.Topic.Title"></Title>

@switch (result.Topic)
{
    case PersonTopicDetail x:
        <PersonHeader
            Title="@x.Title"
            Description="@x.Description"
            Image="@x.Image"
            Born="@x.Born"
            Died="@x.Died"
            Characteristics="@x.Characteristics"
            Breadcrumbs="@_breadcrumbs"/>
        break;

    case EventTopicDetail x:
        <EventHeader
            Title="@x.Title"
            Description="@x.Description"
            Image="@x.Image"
            Started="@x.Started"
            Ended="@x.Ended"
            Breadcrumbs="@_breadcrumbs"/>
        break;
}

<section class="section pt-3 pt-sm-6">
    <div class="container mud-paper pa-3">

        <div class="content-header">
            <div class="contents">
                <MudText Typo="Typo.h6">
                    @L["Contents"]
                </MudText>
                <ul>
                    @foreach (var (title, _, _) in result.Topic.Chapters)
                    {
                        <li>
                            <MudText Typo="Typo.subtitle1">@title</MudText>
                        </li>
                    }
                </ul>
            </div>
            <div class="reactions">
                <TopicReactionButtons
                    Id="@Id"
                    IsFavorite="@result.IsFavorite"
                    Rating="@result.Rating"
                    OnFavoriteClick="@OnFavoriteClick"
                    OnLikeClick="@OnLikeClick"
                    OnDislikeClick="@OnDislikeClick"/>
            </div>
            <div class="test">
                <CreateTestButtons
                    TestTypes="@result.Test.TestTypes"
                    Status="@result.Test.Status"
                    Subject="@SubjectType.History"
                    IsLoading="@(_test?.Status == ResponseStatus.Loading)"
                    OnCreateTestClick="@CreateTestAsync"/>
            </div>
        </div>

        <MudDivider DividerType="DividerType.Middle" Class="my-6 my-sm-8 my-md-12"/>

        @foreach (var (title, subtitle, content) in result.Topic.Chapters)
        {
            <article class="mb-6 mb-sm-12">
                <div class="mb-6">
                    <h2 class="chapter-title">
                        @title
                    </h2>
                    @if (!string.IsNullOrEmpty(subtitle))
                    {
                        <h3 class="chapter-subtitle">
                            @subtitle
                        </h3>
                    }
                </div>
                <MarkdownText Text="@content"/>
            </article>
        }
    </div>
</section>

@if (result.RelatedTopics.Length > 0)
{
    <section class="section">
        <div class="container">
            <MudText Typo="Typo.h5" Class="mb-3">
                @L["Topics:Related"]
            </MudText>
            <DefaultFillGrid>
                @foreach (var topic in result.RelatedTopics)
                {
                    <TopicCard
                        Id="@topic.Id"
                        Href="@Links.Subject.History.Topic(topic.Id)"
                        Image="@topic.Image"
                        Title="@topic.Title"
                        Subtitle="@topic.Overview"
                        Rating="@topic.Rating"
                        IsFavorite="@topic.IsFavorite"
                        OnFavoriteClick="@OnFavoriteClick">
                        <ImageFooter>
                            <HistoryEpochChip Class="ma-0" Epoch="@topic.Epoch"/>
                        </ImageFooter>
                    </TopicCard>
                }
            </DefaultFillGrid>
        </div>
    </section>
}

@if (result.Test.TestTypes.Length > 0)
{
    <section class="section">
        <div class="container">
            <div class="mb-3">
                <MudLink Href="@Links.Profile.History.Statistics" Typo="Typo.h5">
                    @L["Statistics"]
                </MudLink>
            </div>
            <MudExpansionPanels>
                @if (result.Test.TestTypes.Contains(TestType.Easy))
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex flex-wrap justify-space-between mr-3 mr-sm-6">
                                <MudText Typo="Typo.subtitle1">
                                    @L["Tests:Easy"]
                                </MudText>
                                <MudText Typo="Typo.subtitle1">
                                    @L["TimeSpent"]: @result.Statistics.EasyTest.TimeSpent.ToSimpleFormat()
                                </MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <CreateTestButtons
                                Class="mb-3 mb-sm-6"
                                TestTypes="@(new[] {TestType.Easy})"
                                Status="@result.Test.Status"
                                Subject="@SubjectType.History"
                                IsLoading="@(_test?.Status == ResponseStatus.Loading)"
                                OnCreateTestClick="@CreateTestAsync"/>
                            <TestStatisticsGrid
                                Score="@result.Statistics.EasyTest.Score"
                                AnswerRatio="@result.Statistics.EasyTest.AnswerRatio"
                                NumberOfTests="@result.Statistics.EasyTest.NumberOfTests"/>
                        </ChildContent>
                    </MudExpansionPanel>
                }

                @if (result.Test.TestTypes.Contains(TestType.Hard))
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex flex-wrap justify-space-between mr-3 mr-sm-6">
                                <MudText Typo="Typo.subtitle1">
                                    @L["Tests:Hard"]
                                </MudText>
                                <MudText Typo="Typo.subtitle1">
                                    @L["TimeSpent"]: @result.Statistics.HardTest.TimeSpent.ToSimpleFormat()
                                </MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <CreateTestButtons
                                Class="mb-3 mb-sm-6"
                                TestTypes="@(new[] {TestType.Hard})"
                                Status="@result.Test.Status"
                                Subject="@SubjectType.History"
                                IsLoading="@(_test?.Status == ResponseStatus.Loading)"
                                OnCreateTestClick="@CreateTestAsync"/>
                            <TestStatisticsGrid
                                Score="@result.Statistics.HardTest.Score"
                                AnswerRatio="@result.Statistics.HardTest.AnswerRatio"
                                NumberOfTests="@result.Statistics.HardTest.NumberOfTests"/>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </div>
    </section>

    @if (result.Statistics.Conclusions.Length > 0)
    {
        <section class="section">
            <div class="container">
                <MudText Typo="Typo.h5" Class="mb-3">
                    @L["Tests:Latest"]
                </MudText>
                <DefaultFillGrid>
                    @foreach (var conclusion in result.Statistics.Conclusions)
                    {
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudText Typo="Typo.subtitle1" Class="mr-3">
                                            @conclusion.CompletedAt.ToSimpleFormat()
                                        </MudText>
                                        <ConclusionStatusTitle Status="@conclusion.Status"/>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <TestConclusionList
                                        TestType="@conclusion.TestType"
                                        TimeSpent="@conclusion.TimeSpent"
                                        Score="@conclusion.Score"
                                        AnswerRatio="@conclusion.AnswerRatio"/>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    }
                </DefaultFillGrid>
            </div>
        </section>
    }
}
</Result>
</ApiResponseViewer>


@code {
    private ApiResponse<TestCreatedResult>? _test;
    private ApiResponse<TopicDetailComposition> _topic = ApiResponse<TopicDetailComposition>.Loading();
    private List<BreadcrumbItem> _breadcrumbs = new();

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private ErrorManager ErrorManager { get; set; } = default!;

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _topic = ApiResponse<TopicDetailComposition>.Loading();
        _topic = await HistoryClient.Topic.GetAsync(Id);

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, Links.Subject.History.Index),
                new(L[$"History:{_topic.Data.Topic.Epoch}"].Value, Links.Subject.History.Epoch(_topic.Data.Topic.Epoch))
            };
    }

    private async Task CreateTestAsync(TestType testType)
    {
        _test = ApiResponse<TestCreatedResult>.Loading();
        _test = await HistoryClient.Topic.CreateTestAsync(Id, testType);

        if (_test.Status == ResponseStatus.Success)
            NavigationManager.NavigateTo(Links.Subject.History.Test(_test.Data.Id));
        else
            Snackbar.Add(ErrorManager.Localize(_test.Error).Title, Severity.Error);
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }


    private async Task<bool> OnLikeClick()
    {
        var response = await HistoryClient.Topic.LikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

    private async Task<bool> OnDislikeClick()
    {
        var response = await HistoryClient.Topic.DislikeAsync(Id);
        return response.Status == ResponseStatus.Success;
    }

}
