@using Elwark.Education.Web.Gateways.Models.History
@inject IStringLocalizer<App> L

<div class="grid">
    <div>
        <MudText Typo="Typo.h1" Class="title">
            @Topic.Title
        </MudText>
        @if (Topic.Started == Topic.Ended && Topic.Started is not null)
        {
            <HistoryDate Date="@Topic.Started"/>
        }
        else if (Topic.Started != Topic.Ended && Topic.Started is not null)
        {
            <div class="d-flex flex-row flex-wrap">
                <HistoryDate Date="@Topic.Started"/>
                <MudText Typo="Typo.subtitle1" class="mx-3">&#8212;</MudText>
                <HistoryDate Date="@Topic.Ended"/>
            </div>
        }
    </div>

    <div>
        <Breadcrumbs Items="@Breadcrumbs" Class="mb-6"/>
        <MudText Typo="Typo.subtitle1" Class="mb-6">
            @Topic.Description
        </MudText>
        <div class="d-flex flex-row align-center mb-3">
            <RatingIcon Rating="@Topic.Rating" Size="@Size.Medium"/>

            <div class="mx-3"></div>

            <MudTooltip Text="@(Topic.IsFavorite ? L["RemoveFromFavorite"] : L["AddToFavorite"])">
                <MudToggleIconButton
                    Toggled="@Topic.IsFavorite"
                    ToggledChanged="@OnFavoriteChanged"
                    Icon="@Icons.Filled.FavoriteBorder"
                    Color="Color.Default"
                    Size="Size.Medium"
                    ToggledIcon="@Icons.Filled.Favorite"
                    ToggledColor="Color.Error"
                    ToggledSize="Size.Medium"/>
            </MudTooltip>
        </div>
    </div>
    
    @if (Topic.Test is not null)
    {
        <div class="test">
            <TopicTestCard Subject="@SubjectType.History" Test="@Topic.Test"/>
        </div>
    }
</div>

<div class="image">
    <img src="@Topic.Image" alt="@Topic.Title"/>
</div>

@code {

    [Parameter]
    public HistoryEventTopicDetail Topic { get; set; } = default!;

    [Parameter]
    public List<BreadcrumbItem> Breadcrumbs { get; init; } = new();

    [Parameter]
    public Func<string, Task<bool>> OnFavoriteClick { get; set; } = _ => Task.FromResult(false);

    private async Task OnFavoriteChanged(bool toggled) =>
        Topic = Topic with{IsFavorite = await OnFavoriteClick.Invoke(Topic.Id)};

}
