@page "/history/{type}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.History.Epoch
@using Elwark.Education.Web.Gateways.History.Topic
@inject IHistoryClient HistoryClient
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> L

@attribute [Authorize]

<div class="layout">
    <ApiResponseViewer Response="_period">
        <Placeholder>
            <div class="header">
                <div class="image">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="40vh" Style="display: block;"/>
                </div>
                <MudSkeleton Width="30%" Height="42px"/>
                <MudSkeleton Width="50%"/>
                <MudSkeleton Width="40%"/>
                <MudSkeleton Width="80%"/>
            </div>
        </Placeholder>
        <Result Context="period">
            <Title Value="@(period.Title)"/>
            <div class="header">
                <div class="image mb-6">
                    <img src="@period.Image" loading="lazy" alt="@period.Title"/>
                </div>
                <MudText Class="title" Typo="Typo.h1">
                    @period.Title
                </MudText>
                <MudLink Class="period-link" Href="@(Links.History.Index)">
                    @L["Subject:History"]
                </MudLink>
                <MudText Typo="Typo.subtitle1" Class="mt-6">
                    @period.Description
                </MudText>
            </div>
        </Result>
    </ApiResponseViewer>

    <ApiResponseViewer Response="_topics">
        <Placeholder>
            <SkeletonCard/>
            <SkeletonCard/>
            <SkeletonCard/>
            <SkeletonCard/>
        </Placeholder>
        <Result Context="topics">
            @foreach (var item in topics.Items)
            {
                <TopicCard
                    Id="@item.Id"
                    Href="@Links.History.Topic(item.Id)"
                    Image="@item.Image"
                    Title="@item.Title"
                    Subtitle="@item.Overview"
                    Rating="@item.Rating"
                    IsFavorite="@item.IsFavorite"
                    OnFavoriteClick="@OnFavoriteClick">
                    <ImageFooter>
                        <HistoryEpochChip Class="ma-0" Epoch="@item.Epoch"/>
                    </ImageFooter>
                </TopicCard>
            }
            <InfinityScroll ObserverTargetId="tg" ObservableTargetReached="@LoadMoreAsync">
                <div id="tg" class="d-flex justify-center align-center">
                    @if (_request.Token is not null)
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Large"/>
                    }
                </div>
            </InfinityScroll>
        </Result>
    </ApiResponseViewer>
</div>

@code {
    private ApiResponse<EpochModel> _period = ApiResponse<EpochModel>.Loading();

    private ApiResponse<PageResponse<UserTopicSummary>> _topics = ApiResponse<PageResponse<UserTopicSummary>>.Loading();

    private GetTopicsRequest _request = new(EpochType.Prehistory, null, 20);

    [Parameter]
    public string? Type { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _period = ApiResponse<EpochModel>.Loading();
        _topics = ApiResponse<PageResponse<UserTopicSummary>>.Loading();

        if (Enum.TryParse<EpochType>(Type, true, out var type))
        {
            _request = _request with { Epoch = type };

            _period = await HistoryClient.Epoch.GetAsync(type);
            _topics = await HistoryClient.Topic.GetAsync(_request);

            _request = _request with {Token = _topics.Data.Token};
        }
        else
        {
            _period = ApiResponse<EpochModel>.Fail(Error.NotFound);
            _topics = ApiResponse<PageResponse<UserTopicSummary>>.Fail(Error.NotFound);
        }
    }

    private async Task LoadMoreAsync()
    {
        if (_request.Token is null)
            return;

        var response = await HistoryClient.Topic.GetAsync(_request);

        if (response.Status == ResponseStatus.Fail)
        {
            _topics = ApiResponse<PageResponse<UserTopicSummary>>.Fail(response.Error);
            return;
        }

        _topics = ApiResponse<PageResponse<UserTopicSummary>>.Success(
            new PageResponse<UserTopicSummary>(
                _topics.Data.Items.Union(response.Data.Items).ToArray(),
                response.Data.Token
                )
            );

        _request = _request with {Token = response.Data.Token};
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }

}
