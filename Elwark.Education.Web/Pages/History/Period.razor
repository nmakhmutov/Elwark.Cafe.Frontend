@page "/history/{type}"
@using Elwark.Education.Web.Services.History.Model
@using Elwark.Education.Web.Services.History.Request
@inject IHistoryService HistoryService
@inject IStringLocalizer<App> L
@attribute [Authorize]

@if (_period is null || _topics.Count == 0)
{
    <PageLoader/>    
}
else
{
    <Title Value="@_period.Title"></Title>
    <div class="ma-6">
        <Breadcrumbs Items="@_breadcrumbs" Class="mb-3"/>
        <div class="d-flex align-center mb-3">
            <MudAvatar Class="mr-3" Image="@(_period.Image)" Style="width: 100px; height: 100px" Square="true"/>
            <MudText Typo="Typo.h3">@_period.Title</MudText>
        </div>
        <MudText Typo="Typo.subtitle1">@_period.Description</MudText>
    </div>
    <div class="layout mx-6">
        <Virtualize Items="_topics" Context="item">
            <MudCard>
                <MudCardMedia Image="@(item.Image)" Height="200"></MudCardMedia>
                <MudCardContent>
                    <MudLink Typo="Typo.subtitle1" Href="@(Links.History.Topic(item.TopicId))">
                        @item.Title
                    </MudLink>
                    <MudText Typo="Typo.body2">
                        @item.Range
                    </MudText>
                </MudCardContent>
                @if (item.Progress is not null)
                {
                    <MudDivider/>
                    <MudCardActions>
                        <LearningProgress Progress="@item.Progress"/>
                    </MudCardActions>                }
            </MudCard>
        </Virtualize>
    </div>
    @if (_showMore)
    {
        <MudButton OnClick="@LoadMoreAsync" Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" Style="margin: 10px auto;display: block">
            @L["LoadMore"]
        </MudButton>        
    }
}

@code {

    private BreadcrumbsItem[] _breadcrumbs = Array.Empty<BreadcrumbsItem>();
    private HistoryPeriodModel? _period;
    private readonly List<HistoryTopicItem> _topics = new();
    private bool _showMore;

    [Parameter]
    public string? Type { get; set; }

    private GetTopicsRequest _request = new(PeriodType.Prehistory, 1, 20);

    protected override void OnInitialized() => _breadcrumbs = new[]
    {
        new BreadcrumbsItem(L["History"].Value, Links.History.Index)
    };

    protected override async Task OnParametersSetAsync()
    {
        _topics.Clear();
        _period = null;
        if (Enum.TryParse<PeriodType>(Type, true, out var type))
        {
            _request = new GetTopicsRequest(type, 1, 20);
            try
            {
                _period = await HistoryService.GetPeriodAsync(type);
                _topics.AddRange(await HistoryService.GetTopicsAsync(_request));
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
            _showMore = true;
        }
    }

    private async Task LoadMoreAsync()
    {
        _request = _request with {Page = (short) (_request.Page + 1)};
        var result = await HistoryService.GetTopicsAsync(_request);
        if (result.Length != _request.Count)
        {
            _showMore = false;
        }
        _topics.AddRange(result);
    }

}