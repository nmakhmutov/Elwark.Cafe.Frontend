@page "/history/{type}"
@using Elwark.Education.Web.Services.History.Model
@using Elwark.Education.Web.Services.History.Request
@using Elwark.Education.Web.Infrastructure.Extensions
@using Elwark.Education.Web.Infrastructure
@inject IHistoryService HistoryService
@inject IStringLocalizer<App> L

@attribute [Authorize]

@switch (_aggregate.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="@_aggregate.Error"/>
        break;

    case ResponseStatus.Success:
        <Title Value="@(_aggregate.Data.Period.Title)"></Title>
        <div class="ma-6">
            <Breadcrumbs Items="@_breadcrumbs" Class="mb-3"/>
            <div class="d-flex align-center mb-3">
                <MudAvatar Class="mr-3" Image="@(_aggregate.Data.Period.Image)" Square="true" Style="width: 100px; height: 100px"/>
                <MudText Typo="Typo.h3">@_aggregate.Data.Period.Title</MudText>
            </div>
            <MudText Typo="Typo.subtitle1">
                @_aggregate.Data.Period.Description
            </MudText>
        </div>
        <div class="layout ma-6">
            <InfinityScroll ObserverTargetId="observerTarget" ObservableTargetReached="@(async () => await LoadMoreAsync())">
                @foreach (var item in _aggregate.Data.Topics.Items)
                {
                    <TopicCard
                        Href="@Links.History.Topic(item.TopicId)"
                        Image="@item.Image"
                        Title="@item.Title"
                        Subtitle="@item.Segment.ToString(L)"
                        Progress="@item.Progress"/>
                }
            </InfinityScroll>
        </div>
        <div id="observerTarget"></div>
        @if (!string.IsNullOrEmpty(_aggregate.Data.Topics.Token))
        {
            <MudButton OnClick="@LoadMoreAsync" Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                       Style="margin: 10px auto;display: block">
                @L["LoadMore"]
            </MudButton>
        }
        break;
}

@code {

    private record Aggregate(HistoryPeriodModel Period, PageableResponse<HistoryTopicItem> Topics);

    private ApiResponse<Aggregate> _aggregate = ApiResponse<Aggregate>.Loading();

    private BreadcrumbsItem[] _breadcrumbs = Array.Empty<BreadcrumbsItem>();

    [Parameter]
    public string? Type { get; set; }

    private GetTopicsRequest _request = new(PeriodType.Prehistory, null, 20);

    protected override void OnInitialized() => _breadcrumbs = new[]
    {
        new BreadcrumbsItem(L["History"].Value, Links.History.Index)
    };

    protected override async Task OnParametersSetAsync()
    {
        _aggregate = ApiResponse<Aggregate>.Loading();
        if (Enum.TryParse<PeriodType>(Type, true, out var type))
        {
            _request = new GetTopicsRequest(type, null, 20);
            try
            {
                var period = await HistoryService.GetPeriodAsync(type);
                var topics = await HistoryService.GetTopicsAsync(_request);

                if (period.Status == ResponseStatus.Fail)
                {
                    _aggregate = ApiResponse<Aggregate>.Fail(period.Error);
                    return;
                }

                if (topics.Status == ResponseStatus.Fail)
                {
                    _aggregate = ApiResponse<Aggregate>.Fail(topics.Error);
                    return;
                }

                _aggregate = ApiResponse<Aggregate>.Success(new Aggregate(period.Data, topics.Data));
                _request = _request with {Token = topics.Data.Token};
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
        else
        {
            _aggregate = ApiResponse<Aggregate>.Fail(Error.NotFound);
        }
    }

    private async Task LoadMoreAsync()
    {
        if (string.IsNullOrEmpty(_aggregate.Data.Topics.Token))
            return;

        _request = _request with {Token = _aggregate.Data.Topics.Token};
        var result = await HistoryService.GetTopicsAsync(_request);
        if (result.Status == ResponseStatus.Fail)
        {
            _aggregate = ApiResponse<Aggregate>.Fail(result.Error);
            return;
        }

        _aggregate = ApiResponse<Aggregate>.Success(
            new Aggregate(
                _aggregate.Data.Period,
                new PageableResponse<HistoryTopicItem>(
                    _aggregate.Data.Topics.Items.Union(result.Data.Items).ToArray(),
                    result.Data.Token
                    )
                )
            );
    }

}