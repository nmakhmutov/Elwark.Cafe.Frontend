@page "/history/{type}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.History.Request
@using Elwark.Education.Web.Gateways.Models.History
@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@attribute [Authorize]

@switch (_aggregate.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="@_aggregate.Error"/>
        break;

    case ResponseStatus.Success:
        <Title Value="@(_aggregate.Data.Period.Title)"></Title>
        <div class="layout ma-6">
            <div class="header">
                <div class="image-container mb-6">
                    <img class="image" src="@_aggregate.Data.Period.Image" alt="@_aggregate.Data.Period.Title"/>
                </div>
                <div class="d-flex flex-column align-center mb-6">
                    <MudText Typo="Typo.h2">
                        @_aggregate.Data.Period.Title
                    </MudText>
                    <MudLink Href="@(Links.History.Index)">
                        @L["History"]
                    </MudLink>
                </div>
                <MudText Typo="Typo.subtitle1">
                    @_aggregate.Data.Period.Description
                </MudText>
            </div>
            <InfinityScroll ObserverTargetId="observerTarget" ObservableTargetReached="@(async () => await LoadMoreAsync())">
                @foreach (var item in _aggregate.Data.Topics.Items)
                {
                    <TopicCard
                        Href="@Links.History.Topic(item.Id)"
                        Image="@item.Image"
                        Title="@item.Title"
                        Subtitle="@item.Overview"
                        Progress="@item.Progress"/>
                }
            </InfinityScroll>
        </div>
        <div id="observerTarget" class="d-flex justify-center my-6">
            @if (_request.Token is not null)
            {
                <MudProgressCircular Indeterminate="true"/>
            }
        </div>
        break;
}

@code {

    private record Aggregate(HistoryPeriodModel Period, PageableResponse<HistoryTopicSummary> Topics);

    private ApiResponse<Aggregate> _aggregate = ApiResponse<Aggregate>.Loading();

    private GetTopicsRequest _request = new(HistoryPeriodType.Prehistory, null, 20);

    [Parameter]
    public string? Type { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _aggregate = ApiResponse<Aggregate>.Loading();
        if (Enum.TryParse<HistoryPeriodType>(Type, true, out var type))
        {
            _request = new GetTopicsRequest(type, null, 20);
            var period = await HistoryClient.GetPeriodAsync(type);
            var topics = await HistoryClient.GetTopicsAsync(_request);

            if (period.Status == ResponseStatus.Fail)
            {
                _aggregate = ApiResponse<Aggregate>.Fail(period.Error);
                return;
            }

            if (topics.Status == ResponseStatus.Fail)
            {
                _aggregate = ApiResponse<Aggregate>.Fail(topics.Error);
                return;
            }

            _aggregate = ApiResponse<Aggregate>.Success(new Aggregate(period.Data, topics.Data));
            _request = _request with {Token = topics.Data.Token};
        }
        else
        {
            _aggregate = ApiResponse<Aggregate>.Fail(Error.NotFound);
        }
    }

    private async Task LoadMoreAsync()
    {
        if (_request.Token is null)
            return;

        var result = await HistoryClient.GetTopicsAsync(_request);

        if (result.Status == ResponseStatus.Fail)
        {
            _aggregate = ApiResponse<Aggregate>.Fail(result.Error);
            return;
        }

        _aggregate = ApiResponse<Aggregate>.Success(
            new Aggregate(
                _aggregate.Data.Period,
                new PageableResponse<HistoryTopicSummary>(
                    _aggregate.Data.Topics.Items.Union(result.Data.Items).ToArray(),
                    result.Data.Token
                    )
                )
            );
        _request = _request with {Token = result.Data.Token};
    }

}