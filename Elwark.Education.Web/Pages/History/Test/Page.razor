@page "/history/test/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@using Elwark.Education.Web.Gateways.Models.Test
@inject IStringLocalizer<App> L
@inject IHistoryClient HistoryClient
@inject NavigationManager NavigationManager

@attribute [Authorize]

@switch (_test.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_test.Error"/>
        break;

    case ResponseStatus.Success:
        <Title Value="@_test.Data.Title"></Title>
        <MudText Typo="Typo.h2" Align="Align.Center" Class="my-6">
            @_test.Data.Title
        </MudText>

        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Class="pa-6 my-6">
                <div class="d-flex flex-row justify-space-between align-center mb-3">
                    <MudText Typo="Typo.subtitle1">
                        @L["Questions"] @(_questionIndex + 1) / @_questions.Count
                    </MudText>
                    <CountdownTimer Date="@_test.Data.ExpiredAt" Color="@_countdownColor" OnComplete="@OnExpired"/>
                </div>
                <TestForm Question="@_questions[_questionIndex]" AnswerResult="@_answerResult" OnAnswer="@OnAnswer" OnNext="@NextQuestion"/>
            </MudPaper>
        </MudContainer>
        break;
}

@code {

    [Parameter]
    public string Id { get; init; } = default!;

    private bool _isTestComplete;
    private Color _countdownColor = Color.Default;
    private ApiResponse<HistoryTestModel> _test = ApiResponse<HistoryTestModel>.Loading();
    private List<TestQuestionModel> _questions = new();
    private int _questionIndex;
    private TestAnswerResult? _answerResult;

    protected override async Task OnInitializedAsync()
    {
        _test = await HistoryClient.Test.GetAsync(Id);

        if (_test.Status == ResponseStatus.Fail && _test.Error.OneOf(Error.NotFound, Error.TestExpired))
        {
            NavigationManager.NavigateTo(Links.Profile.TestDetail(SubjectType.History, Id));
            return;
        }

        if (_test.Status != ResponseStatus.Success)
            return;

        _questions = _test.Data.Questions
            .OrderByDescending(x => x.IsAnswered)
            .ToList();

        _questionIndex = _questions.FindLastIndex(x => x.IsAnswered) + 1;
    }

    private async Task OnAnswer(TestAnswer answer)
    {
        switch (answer)
        {
            case ManyAnswer x:
            {
                var result = await HistoryClient.Test.CheckAsync(_test.Data.Id, _questions[_questionIndex].Id, x);
                if (result.Status == ResponseStatus.Fail)
                {
                    _test = ApiResponse<HistoryTestModel>.Fail(result.Error);
                    return;
                }
                _answerResult = result.Data;
                break;
            }

            case SingleAnswer x:
            {
                var result = await HistoryClient.Test.CheckAsync(_test.Data.Id, _questions[_questionIndex].Id, x);
                if (result.Status == ResponseStatus.Fail)
                {
                    _test = ApiResponse<HistoryTestModel>.Fail(result.Error);
                    return;
                }
                _answerResult = result.Data;
                break;
            }

            case TextAnswer x:
            {
                var result = await HistoryClient.Test.CheckAsync(_test.Data.Id, _questions[_questionIndex].Id, x);
                if (result.Status == ResponseStatus.Fail)
                {
                    _test = ApiResponse<HistoryTestModel>.Fail(result.Error);
                    return;
                }
                _answerResult = result.Data;
                break;
            }
        }

        if (_answerResult is null)
        {
            _test = ApiResponse<HistoryTestModel>.Fail(Error.Unknown);
            return;
        }

        _isTestComplete = _answerResult.IsTestComplete;

        if (!_answerResult.IsAnswerCorrect)
        {
            var wrong = _questions.First(x => x.Id == _questions[_questionIndex].Id);
            _questions.Add(wrong with{Options = wrong.Options.OrderBy(_ => Guid.NewGuid()).ToArray()});
        }
    }

    private void NextQuestion()
    {
        if (_isTestComplete)
        {
            NavigationManager.NavigateTo(Links.Profile.TestDetail(SubjectType.History, Id));
            return;
        }

        _questionIndex++;
        _answerResult = null;
    }

    private async Task OnExpired()
    {
        _countdownColor = Color.Error;
        _test = await HistoryClient.Test.GetAsync(Id);

        if (_test.Status == ResponseStatus.Fail && _test.Error.OneOf(Error.NotFound, Error.TestExpired))
            NavigationManager.NavigateTo(Links.Profile.TestDetail(SubjectType.History, Id));
    }

}
