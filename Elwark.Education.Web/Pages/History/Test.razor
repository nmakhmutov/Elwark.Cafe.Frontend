@page "/history/test/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@using Elwark.Education.Web.Gateways.Models.Test
@inject IStringLocalizer<App> L
@inject IHistoryClient HistoryClient
@inject NavigationManager NavigationManager

@attribute [Authorize]

@switch (_test.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_test.Error"/>
        break;

    case ResponseStatus.Success when _test.Data.IsComplete:
        <MudText Typo="Typo.h5">Congratulation</MudText>
        break;

    case ResponseStatus.Success:
        var title = $"{L["Questions"]} {_questionIndex + 1} / {_questions.Count}";
        <Title Value="@title"></Title>
        <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="my-6">
            @title
        </MudText>

        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Class="pa-6">
                <TestForm Question="@_questions[_questionIndex]" AnswerResult="@_answerResult" OnAnswer="@OnAnswer" OnNext="@NextQuestion"/>
            </MudPaper>
        </MudContainer>

        <CountdownTimer Class="my-6" Date="@_test.Data.ExpiredAt"/>
        break;
}

@code {

    [Parameter]
    public string Id { get; init; } = default!;

    private ApiResponse<HistoryTestModel> _test = ApiResponse<HistoryTestModel>.Loading();
    private List<TestQuestionModel> _questions = new();
    private int _questionIndex;
    private TestAnswerResult? _answerResult;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _test = await HistoryClient.GetTestAsync(Id);
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
            return;
        }

        if (_test.Status == ResponseStatus.Fail && _test.Error.Status == 404)
        {
            NavigationManager.NavigateTo(Links.Profile.TestDetail(Subject.History, Id));
            return;
        }
        
        if (_test.Status != ResponseStatus.Success)
            return;

        _questions = _test.Data.Questions
            .OrderByDescending(x => x.IsAnswered)
            .ToList();

        _questionIndex = _questions.FindLastIndex(x => x.IsAnswered) + 1;
    }

    private async Task OnAnswer(TestAnswer answer)
    {
        try
        {
            switch (answer)
            {
                case ManyAnswer x:
                {
                    var result = await HistoryClient.CheckAnswer(_test.Data.Id, _questions[_questionIndex].Id, x);
                    if (result.Status == ResponseStatus.Fail)
                    {
                        _test = ApiResponse<HistoryTestModel>.Fail(result.Error);
                        return;
                    }
                    _answerResult = result.Data;
                    break;
                }

                case SingleAnswer x:
                {
                    var result = await HistoryClient.CheckAnswer(_test.Data.Id, _questions[_questionIndex].Id, x);
                    if (result.Status == ResponseStatus.Fail)
                    {
                        _test = ApiResponse<HistoryTestModel>.Fail(result.Error);
                        return;
                    }
                    _answerResult = result.Data;
                    break;
                }

                case TextAnswer x:
                {
                    var result = await HistoryClient.CheckAnswer(_test.Data.Id, _questions[_questionIndex].Id, x);
                    if (result.Status == ResponseStatus.Fail)
                    {
                        _test = ApiResponse<HistoryTestModel>.Fail(result.Error);
                        return;
                    }
                    _answerResult = result.Data;
                    break;
                }
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }

        if (_answerResult is null)
        {
            _test = ApiResponse<HistoryTestModel>.Fail(Error.Unknown);
            return;
        }

        if (_answerResult.IsComplete)
        {
            _test = ApiResponse<HistoryTestModel>.Success(
                new HistoryTestModel(
                    _test.Data.Id,
                    _test.Data.CreatedAt,
                    _test.Data.ExpiredAt,
                    _answerResult.IsComplete,
                    _test.Data.Questions
                    )
                );
        }

        if (!_answerResult.IsCorrect)
        {
            var wrong = _questions.First(x => x.Id == _questions[_questionIndex].Id);
            _questions.Add(wrong with{Options = wrong.Options.OrderBy(_ => Guid.NewGuid()).ToArray()});
        }
    }

    private void NextQuestion()
    {
        _questionIndex++;
        _answerResult = null;
    }

}