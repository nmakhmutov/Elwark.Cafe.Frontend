@page "/history/topic/{id}"
@using Elwark.Education.Web.Services.History.Model
@inject IHistoryService HistoryService
@attribute [Authorize]

@if (_topic is null)
{
    <PageLoader/>}
else
{
    <Title Value="@_topic.Title"/>
    <div class="container">
        <div class="image-container">
            <div class="image" style="background-image: url(@_topic.Image)">
                <div class="cover">
                    <div class="title-container">
                        <MudText Typo="Typo.h4" Class="mb-3">@_topic.Title</MudText>
                        <MudText Typo="Typo.subtitle1">@_topic.Date</MudText>
                    </div>
                </div>
            </div>
        </div>
        <div class="articles-container">
            <Breadcrumbs Items="@_breadcrumbsItems" Class="ma-6"/>
            <MudText Typo="Typo.body1" Class="ma-6" Style="max-width: 980px">
                @_topic.Description
            </MudText>
            @foreach (var (_, articleId, title, subtitle, image, type, (_, passedAt)) in _topic.Articles)
            {
                <div class="article-card mud-paper ma-6 pa-3">
                    <div class="article-image">
                        <MudAvatar Square="true" Style="width: 90px; height: 90px" Image="@(image)"/>
                    </div>
                    <div class="article-texts">
                        @if (type == ArticleType.Premium)
                        {
                            <MudText Typo="Typo.body2" Color="Color.Warning">@type</MudText>                            
                        }
                        <MudLink Typo="Typo.h5" Href="@($"/history/article/{articleId}")">
                            @title
                        </MudLink>
                        @if (passedAt.HasValue)
                        {
                            <MudText Typo="Typo.body2">Last passed at @passedAt.Value.ToShortDateString()</MudText>                            
                        }
                    </div>
                    <div class="article-description">
                        <MudText Typo="Typo.body1">@subtitle</MudText>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private HistoryTopicModel? _topic;

    private BreadcrumbsItem[] _breadcrumbsItems = Array.Empty<BreadcrumbsItem>();

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _topic = await HistoryService.GetTopicAsync(Id);
        if (_topic is not null)
            _breadcrumbsItems = new BreadcrumbsItem[]
            {
                new("History", "/history"),
                new(_topic.Period.Title, $"/history/{_topic.Period.Type}")
            };
    }

}