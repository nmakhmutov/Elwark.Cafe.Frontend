@page "/history/topic/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@inject IHistoryClient HistoryClient
@inject IDialogService Dialog
@inject IStringLocalizer<App> L

@attribute [Authorize]
@switch (_topic.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_topic.Error"/>
        break;

    case ResponseStatus.Success:
        <Title Value="@_topic.Data.Title"/>
        <div class="container">
            <div class="image-container">
                <div class="image" style="background-image: url(@_topic.Data.Image)">
                    <div class="cover">
                        <div class="title-container">
                            <MudText Typo="Typo.h4" Class="mb-3">@_topic.Data.Title</MudText>
                            <MudText Typo="Typo.subtitle1">@_topic.Data.Segment.ToString(L)</MudText>
                        </div>
                    </div>
                </div>
            </div>
            <div class="articles-container w-100">
                <Breadcrumbs Items="@_breadcrumbs" Class="ma-6"/>
                <MudText Typo="Typo.body1" Class="ma-6" Style="max-width: 980px">
                    @_topic.Data.Description
                </MudText>
                <Virtualize Items="@_topic.Data.Articles" Context="item">
                    <div class="article-card mud-paper ma-6 pa-3">
                        @if (item.Image is not null)
                        {
                            <div class="article-image">
                                <MudAvatar Image="@(item.Image)" Square="true" Style="width: 90px; height: 90px"/>
                            </div>
                        }
                        <div class="article-texts">
                            @if (item.Type == ContentType.Premium)
                            {
                                <MudText Typo="Typo.body2" Color="Color.Warning">
                                    @item.Type
                                </MudText>
                                <a class="mud-typography mud-link mud-primary-text mud-link-underline-hover mud-typography-h5"
                                   href="#" @onclick="@OpenSubscriptionDialog" @onclick:preventDefault="true">
                                    @item.Title
                                </a>
                            }
                            else
                            {
                                <MudLink Typo="Typo.h5" Href="@(Links.History.Article(item.ArticleId))">
                                    @item.Title
                                </MudLink>                            }
                            @if (item.IsTestAvailable)
                            {
                                <MudText Typo="Typo.body2">
                                    @if (item.Progress is null)
                                    {
                                        <em>Test not passed</em>
                                    }
                                    else
                                    {
                                        <em>Test passed @item.Progress.PassedTimes times. Last at @item.Progress.TestPassedAt.ToSimpleFormat()</em>
                                    }
                                </MudText>                            }
                        </div>
                        <div class="article-description">
                            <MudText Typo="Typo.body1">
                                @item.Subtitle
                            </MudText>
                        </div>
                    </div>
                </Virtualize>
            </div>
        </div>
        break;
}

@code {
    private ApiResponse<HistoryTopicDetail> _topic = ApiResponse<HistoryTopicDetail>.Loading();

    private BreadcrumbsItem[] _breadcrumbs = Array.Empty<BreadcrumbsItem>();

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _topic = await HistoryClient.GetTopicAsync(Id);
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
            return;
        }

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new BreadcrumbsItem[]
            {
                new(L["History"].Value, Links.History.Index),
                new(_topic.Data.Period.Title, Links.History.Period(_topic.Data.Period.Type))
            };
    }

    private void OpenSubscriptionDialog()
    {
        Dialog.Show<SubscriptionModal>(null, new DialogOptions {MaxWidth = MaxWidth.Large});
    }

}