@page "/history/topic/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@inject IHistoryClient HistoryClient
@inject IDialogService Dialog
@inject IStringLocalizer<App> L

@attribute [Authorize]
@switch (_topic.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_topic.Error"/>
        break;

    case ResponseStatus.Success:
        <Title Value="@_topic.Data.Title"/>
        @switch (_topic.Data)
        {
            case HistoryEventTopicDetail x:
                <HistoryTopicEvent Topic="@x" Breadcrumbs="@_breadcrumbs" OnPremiumClick="@OnPremiumClick"/>
                break;

            case HistoryPersonTopicDetail x:
                <HistoryTopicPersonHeader Topic="@x" Breadcrumbs="@_breadcrumbs" Class="mb-12"/>
                <HistoryTopicPersonArticles Articles="@x.Articles" OnPremiumClick="@OnPremiumClick"/>
                break;
        }
        break;
}

@code {
    private ApiResponse<HistoryTopicDetail> _topic = ApiResponse<HistoryTopicDetail>.Loading();

    private BreadcrumbsItem[] _breadcrumbs = Array.Empty<BreadcrumbsItem>();

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _topic = await HistoryClient.GetTopicAsync(Id);

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new BreadcrumbsItem[]
            {
                new(L["Subject:History"].Value, Links.History.Index),
                new(_topic.Data.Period.Title, Links.History.Period(_topic.Data.Period.Type))
            };
    }

    private void OnPremiumClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };
        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = SubjectType.History
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

}