@page "/history/topic/{id}"
@using Elwark.Education.Web.Services.History.Model
@using Elwark.Education.Web.Services.Model
@inject IHistoryService HistoryService
@inject IDialogService Dialog
@inject IStringLocalizer<App> L

@attribute [Authorize]

@if (_topic is null)
{
    <PageLoader/>    
}
else
{
    <Title Value="@_topic.Title"/>
    <div class="container">
        <div class="image-container">
            <div class="image" style="background-image: url(@_topic.Image)">
                <div class="cover">
                    <div class="title-container">
                        <MudText Typo="Typo.h4" Class="mb-3">@_topic.Title</MudText>
                        <MudText Typo="Typo.subtitle1">@_topic.Date</MudText>
                    </div>
                </div>
            </div>
        </div>
        <div class="articles-container w-100">
            <Breadcrumbs Items="@_breadcrumbs" Class="ma-6"/>
            <MudText Typo="Typo.body1" Class="ma-6" Style="max-width: 980px">
                @_topic.Description
            </MudText>
            <Virtualize Items="@_topic.Articles" Context="item">
                <div class="article-card mud-paper ma-6 pa-3">
                    @if (item.Image is not null)
                    {
                        <div class="article-image">
                            <MudAvatar Image="@(item.Image)" Square="true" Style="width: 90px; height: 90px"/>
                        </div>
                    }
                    <div class="article-texts">
                        @if (item.Type == ArticleType.Premium)
                        {
                            <MudText Typo="Typo.body2" Color="Color.Warning">
                                @item.Type
                            </MudText>
                            <a class="mud-typography mud-link mud-primary-text mud-link-underline-hover mud-typography-h5" href="#"
                               @onclick="@OpenSubscriptionDialog" @onclick:preventDefault="true">
                                @item.Title
                            </a>
                        }
                        else
                        {
                            <MudLink Typo="Typo.h5" Href="@(Links.History.Article(item.ArticleId))">
                                @item.Title
                            </MudLink>                            
                        }
                        @if (item.Test.PassedAt.HasValue)
                        {
                            <MudText Typo="Typo.body2">
                                <em>Last passed at @item.Test.PassedAt.Value.ToShortDateString()</em>
                            </MudText>                            
                        }
                    </div>
                    <div class="article-description">
                        <MudText Typo="Typo.body1">
                            @item.Subtitle
                        </MudText>
                    </div>
                </div>
            </Virtualize>
        </div>
    </div>
}

@code {
    private HistoryTopicModel? _topic;

    private BreadcrumbsItem[] _breadcrumbs = Array.Empty<BreadcrumbsItem>();

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _topic = await HistoryService.GetTopicAsync(Id);
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
            return;
        }

        if (_topic is not null)
            _breadcrumbs = new BreadcrumbsItem[]
            {
                new(L["History"].Value, Links.History.Index),
                new(_topic.Period.Title, Links.History.Period(_topic.Period.Type))
            };
    }

    private void OpenSubscriptionDialog()
    {
        Dialog.Show<SubscriptionModal>(null, new DialogOptions {MaxWidth = MaxWidth.Large});
    }

}