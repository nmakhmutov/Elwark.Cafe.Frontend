@page "/history/topic/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.History
@inject IHistoryClient HistoryClient
@inject IDialogService Dialog
@inject IStringLocalizer<App> L

@attribute [Authorize]
@switch (_topic.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_topic.Error"/>
        break;

    case ResponseStatus.Success:
        <Title Value="@_topic.Data.Title"/>
        @switch (_topic.Data)
        {
            case HistoryEventTopicDetail x:
                <HistoryTopicEventHeader Topic="@x" Breadcrumbs="@_breadcrumbs"/>
                <HistoryTopicEventArticles Articles="@x.Articles" OnPremiumClick="@OnPremiumClick"/>
                if (x.RelatedTopics.Length > 0)
                {
                    <HistoryRelatedTopics
                        Class="mw-md mx-lg-auto"
                        Topics="@x.RelatedTopics"
                        OnFavoriteClick="@OnFavoriteClick"/>
                }
                break;

            case HistoryPersonTopicDetail x:
                <HistoryTopicPersonHeader Class="mb-16" Topic="@x" Breadcrumbs="@_breadcrumbs" OnFavoriteClick="@OnFavoriteClick"/>
                <HistoryTopicPersonArticles Articles="@x.Articles" OnPremiumClick="@OnPremiumClick"/>
                if (x.RelatedTopics.Length > 0)
                {
                    <HistoryRelatedTopics Topics="@x.RelatedTopics" OnFavoriteClick="@OnFavoriteClick"/>
                }
                break;
        }
        break;
}

@code {
    private ApiResponse<HistoryTopicDetail> _topic = ApiResponse<HistoryTopicDetail>.Loading();

    private List<BreadcrumbItem> _breadcrumbs = new();

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _topic = ApiResponse<HistoryTopicDetail>.Loading();
        _topic = await HistoryClient.GetTopicAsync(Id);

        if (_topic.Status == ResponseStatus.Success)
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new(L["Subject:History"].Value, Links.History.Index),
                new(L[$"History:{_topic.Data.Period}"].Value, Links.History.Period(_topic.Data.Period))
            };
    }

    private void OnPremiumClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };
        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = SubjectType.History
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }

}
