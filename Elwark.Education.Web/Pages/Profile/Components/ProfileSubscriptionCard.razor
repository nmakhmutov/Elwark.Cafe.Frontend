@* ReSharper disable once CheckNamespace *@
@namespace Elwark.Education.Web.Components

@using Elwark.Education.Web.Gateways.Models.User
@inject IStringLocalizer<App> L

<MudCard Class="d-flex flex-column">
    <MudCardHeader>
        <CardHeaderAvatar>
            <SubjectIcon SubjectType="@Subject.SubjectType" Size="@Size.Medium"/>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudLink Typo="Typo.subtitle1" Href="@Links.Subjects.Index(Subject.SubjectType)">
                @L[$"Subject:{Subject.SubjectType}"]
            </MudLink>
            <MudText Typo="Typo.body2" Color="@Subject.Subscription.Type.GetColor()">
                <MudTooltip Text="@L["Subscription"]">
                    @L[$"Subscription:{Subject.Subscription.Type}"]
                </MudTooltip>
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudMenu Icon="@Filled.MoreVert">
                <MudMenuItem Link="@(Links.Profile.Statistics(Subject.SubjectType))">
                    @L["Statistics"]
                </MudMenuItem>
                <MudMenuItem Link="@(Links.Profile.Tests(Subject.SubjectType))">
                    @L["Tests"]
                </MudMenuItem>
                @if (Subject.Subscription.Purchase is null)
                {
                    <MudMenuItem OnClick="@OnBuy">
                        @L["Subscription:ChoosePricingPlan"]
                    </MudMenuItem>
                }
                else
                {
                    <MudMenuItem OnClick="@OnManage">
                        Manage my subscription
                    </MudMenuItem>
                }
            </MudMenu>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image="@Subject.SubjectType.GetBackground()" Height="200"/>
    <MudCardContent Class="flex-grow-1">
        <div class="content-grid">
            @if (Subject.Subscription.Purchase is null)
            {
                <div class="d-flex flex-row justify-center">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@OnBuy">
                        @L["Subscription:ChoosePricingPlan"]
                    </MudButton>
                </div>
            }
            else
            {
                <div class="d-flex flex-row justify-space-between align-center">
                    <MudTooltip Text="@L["Subscription"]">
                        <MudChip Color="@Subject.Subscription.Type.GetColor()" Size="Size.Small" Label="true" Class="ma-0">
                            @L[$"Subscription:{Subject.Subscription.Type}"]
                        </MudChip>
                    </MudTooltip>
                    <MudText Typo="Typo.body2" Align="Align.Right">
                        <em>
                            @L["Subscription:ExpiresAt", Subject.Subscription.Purchase.ExpiredAt.ToSimpleFormat()]
                        </em>
                    </MudText>
                </div>
                
            }
            <MudDivider DividerType="DividerType.FullWidth"/>
            <div class="d-flex flex-row justify-space-between align-center">
                <div>
                    <MudText Typo="Typo.body1">
                        @L["Subscription:TestRestriction"]
                    </MudText>
                    @if (Subject.TestCreating.RestoreAt.HasValue)
                    {
                        <MudText Typo="Typo.caption">
                            <em>
                                @L["Subscription:RestrictionRestoreAt", Subject.TestCreating.RestoreAt.Value.ToSimpleFormat()]
                            </em>
                        </MudText>
                    }
                </div>
                <MudText Typo="Typo.h6" Class="ml-3">
                    @(Subject.TestCreating.Quantity < 0 ? "∞" : Subject.TestCreating.Quantity)
                </MudText>
            </div>
            <div class="d-flex flex-row justify-space-between align-center">
                <div>
                    <MudText Typo="Typo.body1">
                        @L["Subscription:AnswerRestriction"]
                    </MudText>
                    @if (Subject.TestAnswering.RestoreAt.HasValue)
                    {
                        <MudText Typo="Typo.caption">
                            <em>
                                @L["Subscription:RestrictionRestoreAt", Subject.TestAnswering.RestoreAt.Value.ToSimpleFormat()]
                            </em>
                        </MudText>
                    }
                </div>
                <MudText Typo="Typo.h6" Class="ml-3">
                    @(Subject.TestAnswering.Quantity < 0 ? "∞" : Subject.TestAnswering.Quantity)
                </MudText>
            </div>
        </div>
    </MudCardContent>
    <MudCardActions>
        <MudTooltip Text="@L["Statistics"]">
            <MudIconButton Link="@(Links.Profile.Statistics(Subject.SubjectType))" Icon="@Filled.BarChart"/>
        </MudTooltip>
        <MudTooltip Text="@L["Tests"]">
            <MudIconButton Link="@(Links.Profile.Tests(Subject.SubjectType))" Icon="@Filled.Class"/>
        </MudTooltip>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public Subject Subject { get; set; } = default!;

    [Parameter]
    public EventCallback<SubjectType> OnBuyClick { get; set; }

    [Parameter]
    public EventCallback<SubjectType> OnManageClick { get; set; }

    private Task OnBuy() =>
        OnBuyClick.InvokeAsync(Subject.SubjectType);

    private Task OnManage() =>
        OnManageClick.InvokeAsync(Subject.SubjectType);

}