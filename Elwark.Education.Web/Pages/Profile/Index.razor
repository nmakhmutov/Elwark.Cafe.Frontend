@page "/profile"
@layout ProfileLayout
@using Elwark.Education.Web.Services.User
@using Elwark.Education.Web.Services.User.Model
@inject IUserService UserService
@inject IStringLocalizer<ProfileLayout> L
@inject IStringLocalizer<App> Al
@attribute [Authorize]

@switch (Profile.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorCard Error="@Profile.Error"/>
        break;

    case ResponseStatus.Success:
    {
        <MudGrid>
            <MudItem xs="12" md="8" lg="9" xl="10">
                @if (Profile.Data.CurrentTests.Length > 0)
                {
                    <MudText Typo="Typo.h5" Class="mb-2">
                        @L["CurrentTests"]
                    </MudText>
                    <div class="current-tests mb-12">
                        @foreach (var test in Profile.Data.CurrentTests)
                        {
                            var link = test.Subject switch {
                                Subject.History => Links.History.Test(test.Id),
                                Subject.Physics => "#",
                                Subject.Astronomy => "#",
                                _ => "#"
                                };
                            <MudPaper Elevation="1" Class="pa-6">
                                <MudLink Typo="Typo.h6" Href="@link">
                                    @test.Title
                                </MudLink>
                                <MudText Typo="Typo.body2">
                                    @L["ExpireAt"]
                                    @ToDateFormat(test.ExpiredAt)
                                </MudText>
                            </MudPaper>                        }
                    </div>
                }

                <div class="restrictions mb-6">
                    @foreach (var restriction in Profile.Data.Restrictions)
                    {
                        <MudPaper Class="pa-6">
                            <div class="d-flex flex-row align-center mb-3">
                                <SubjectIcon Subject="@restriction.Subject"/>
                                <div Class="ml-3">
                                    <MudText Typo="Typo.h6">
                                        @Al[restriction.Subject.ToString()]
                                    </MudText>
                                    <MudText Typo="Typo.subtitle2" Color="Color.Warning">
                                        Premium
                                    </MudText>
                                </div>
                            </div>
                            <div class="restriction-values">
                                <div class="d-flex flex-column align-center">
                                    <MudText Typo="Typo.h4">
                                        @(restriction.TestCreation.Quantity < 0 ? "∞" : restriction.TestCreation.Quantity)
                                    </MudText>
                                    <MudText Typo="Typo.body1">
                                        Tests
                                    </MudText>
                                    @if (restriction.TestCreation.RestoreAt.HasValue)
                                    {
                                        <MudText Typo="Typo.caption">
                                            @ToDateFormat(restriction.TestCreation.RestoreAt.Value)
                                        </MudText>                                    }
                                </div>

                                <div class="d-flex flex-column align-center">
                                    <MudText Typo="Typo.h4">
                                        @(restriction.Answer.Quantity < 0 ? "∞" : restriction.Answer.Quantity)
                                    </MudText>
                                    <MudText Typo="Typo.body1">
                                        Answers
                                    </MudText>
                                    @if (restriction.Answer.RestoreAt.HasValue)
                                    {
                                        <MudText Typo="Typo.caption">
                                            @ToDateFormat(restriction.Answer.RestoreAt.Value)
                                        </MudText>                                    }
                                </div>
                            </div>
                        </MudPaper>                    }
                </div>
                
                <MudGrid Spacing="1">
                    <MudItem xs="12" sm="4" md="3" lg="2">
                        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-3">
                            @L["Tests"]
                        </MudText>
                        <MudChart
                            ChartType="ChartType.Donut"
                            InputLabels="@_progressLabels"
                            InputData="@_progressTests"
                            LegendPosition="LegendPosition.Bottom"/>
                    </MudItem>
                    <MudItem xs="12" sm="4" md="3" lg="2">
                        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-3">
                            @L["Score"]
                        </MudText>
                        <MudChart
                            ChartType="ChartType.Donut"
                            InputLabels="@_progressLabels"
                            InputData="@_progressScore"
                            LegendPosition="LegendPosition.Bottom"/>
                    </MudItem>
                    <MudItem xs="12" sm="4" md="3" lg="2">
                        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-3">
                            @L["ElapsedTime"]
                        </MudText>
                        <MudChart
                            ChartType="ChartType.Donut"
                            InputLabels="@_progressLabels"
                            InputData="@_progressTimeElapsed"
                            LegendPosition="LegendPosition.Bottom"/>
                    </MudItem>
                    <MudItem xs="12" sm="4" md="3" lg="2">
                        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-3">
                            @L["Answers"]
                        </MudText>
                        <MudChart
                            ChartType="ChartType.Donut"
                            InputLabels="@_progressLabels"
                            InputData="@_progressAnswers"
                            LegendPosition="LegendPosition.Bottom"/>
                    </MudItem>
                </MudGrid>
                
            </MudItem>
            
            <MudItem xs="12" md="4" lg="3" xl="2">
                <MudDatePicker PickerVariant="PickerVariant.Static"/>
            </MudItem>
        </MudGrid>    }
        break;
}

@code {

    [CascadingParameter]
    public ApiResponse<Profile> Profile { get; set; } = ApiResponse<Profile>.Loading();

    string[] _progressLabels = Array.Empty<string>();
    double[] _progressTests = Array.Empty<double>();
    double[] _progressScore = Array.Empty<double>();
    double[] _progressTimeElapsed = Array.Empty<double>();
    double[] _progressAnswers = Array.Empty<double>();

    protected override void OnParametersSet()
    {
        if (Profile.Status != ResponseStatus.Success)
            return;

        var labels = new List<string>();
        var tests = new List<double>();
        var scores = new List<double>();
        var timeElapsed = new List<double>();
        var answers = new List<double>();

        foreach (var progress in Profile.Data.Statistics.Subjects)
        {
            labels.Add(Al[progress.Subject.ToString()].Value);
            tests.Add(progress.Tests);
            scores.Add(progress.Score.Total);
            timeElapsed.Add(progress.ElapsedTime.TotalSeconds);
            answers.Add(progress.Answers.Total);
        }
        _progressLabels = labels.ToArray();
        _progressTests = tests.ToArray();
        _progressScore = scores.ToArray();
        _progressTimeElapsed = timeElapsed.ToArray();
        _progressAnswers = answers.ToArray();
    }

    private static string ToDateFormat(DateTime date) =>
        date.Date == DateTime.UtcNow.Date
            ? date.ToLongTimeString()
            : date.ToShortDateString();

}