@page "/profile"
@using Elwark.Education.Web.Gateways.User
@using Elwark.Education.Web.Gateways
@using Elwark.Education.Web.Gateways.Models.User
@layout ProfileLayout
@inject IUserService UserService
@inject IStringLocalizer<ProfileLayout> L
@inject IStringLocalizer<App> Al
@attribute [Authorize]

@switch (Profile.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="@Profile.Error"/>
        break;

    case ResponseStatus.Success:
    {
        <MudGrid>
            <MudItem xs="12" lg="8">
                @if (Profile.Data.CurrentTests.Length > 0)
                {
                    <MudText Typo="Typo.h5" Class="mb-2">
                        @L["CurrentTests"]
                    </MudText>
                    <div class="current-tests mb-6">
                        @foreach (var test in Profile.Data.CurrentTests)
                        {
                            <CurrentTestCard Test="@test"/>                        }
                    </div>
                }

                <MudText Typo="Typo.h5" Class="mb-2">
                    @Al["Subjects"]
                </MudText>
                <div class="restrictions mb-6">
                    @foreach (var restriction in Profile.Data.Restrictions.OrderBy(x => Al[x.Subject.ToString()].Value))
                    {
                        <SubjectRestrictionCard Restriction="@restriction"/>                    }
                </div>
            </MudItem>

            <MudItem xs="12" lg="4">
                <MudText Typo="Typo.h5" Class="mb-2">
                    @Al["Statistics"]
                </MudText>
                <div class="statistics mb-6">
                    <MudPaper Class="pa-6">
                        <MudText Typo="Typo.h6" Class="mb-3">
                            @L["Tests"]
                        </MudText>
                        @if (_progressTests.Length > 0)
                        {
                            <MudChart
                                ChartType="ChartType.Donut"
                                InputLabels="@_progressLabels"
                                InputData="@_progressTests"
                                LegendPosition="LegendPosition.Bottom"/>                        }
                        else
                        {
                            <MudText Typo="Typo.caption">
                                @Al["NoDataYet"]
                            </MudText>                        }
                    </MudPaper>
                    <MudPaper Class="pa-6">
                        <MudText Typo="Typo.h6" Class="mb-3">
                            @L["Score"]
                        </MudText>
                        @if (_progressScore.Length > 0)
                        {
                            <MudChart
                                ChartType="ChartType.Donut"
                                InputLabels="@_progressLabels"
                                InputData="@_progressScore"
                                LegendPosition="LegendPosition.Bottom"/>                        }
                        else
                        {
                            <MudText Typo="Typo.caption">
                                @Al["NoDataYet"]
                            </MudText>                        }
                    </MudPaper>
                    <MudPaper Class="pa-6">
                        <MudText Typo="Typo.h6" Class="mb-3">
                            @L["ElapsedTime"]
                        </MudText>
                        @if (_progressScore.Length > 0)
                        {
                            <MudChart
                                ChartType="ChartType.Donut"
                                InputLabels="@_progressLabels"
                                InputData="@_progressTimeElapsed"
                                LegendPosition="LegendPosition.Bottom"/>                        }
                        else
                        {
                            <MudText Typo="Typo.caption">
                                @Al["NoDataYet"]
                            </MudText>                        }
                    </MudPaper>
                    <MudPaper Class="pa-6">
                        <MudText Typo="Typo.h6" Class="mb-3">
                            @L["Answers"]
                        </MudText>
                        @if (_progressScore.Length > 0)
                        {
                            <MudChart
                                ChartType="ChartType.Donut"
                                InputLabels="@_progressLabels"
                                InputData="@_progressAnswers"
                                LegendPosition="LegendPosition.Bottom"/>                        }
                        else
                        {
                            <MudText Typo="Typo.caption">
                                @Al["NoDataYet"]
                            </MudText>                        }
                    </MudPaper>
                </div>
            </MudItem>
        </MudGrid>    }
        break;
}

@code {

    [CascadingParameter]
    public ApiResponse<Profile> Profile { get; set; } = ApiResponse<Profile>.Loading();

    string[] _progressLabels = Array.Empty<string>();
    double[] _progressTests = Array.Empty<double>();
    double[] _progressScore = Array.Empty<double>();
    double[] _progressTimeElapsed = Array.Empty<double>();
    double[] _progressAnswers = Array.Empty<double>();

    protected override void OnParametersSet()
    {
        if (Profile.Status != ResponseStatus.Success)
            return;

        _progressLabels = new string[Profile.Data.Statistics.Subjects.Length];
        _progressTests = new double[Profile.Data.Statistics.Subjects.Length];
        _progressScore = new double[Profile.Data.Statistics.Subjects.Length];
        _progressTimeElapsed = new double[Profile.Data.Statistics.Subjects.Length];
        _progressAnswers = new double[Profile.Data.Statistics.Subjects.Length];

        for (var i = 0; i < Profile.Data.Statistics.Subjects.Length; i++)
        {
            var (subject, tests, elapsedTime, score, answers) = Profile.Data.Statistics.Subjects[i];
            _progressLabels[i] = Al[subject.ToString()].Value;
            _progressTests[i] = tests;
            _progressScore[i] = score.Total;
            _progressTimeElapsed[i] = elapsedTime.TotalSeconds;
            _progressAnswers[i] = answers.Answered;
        }
    }

}