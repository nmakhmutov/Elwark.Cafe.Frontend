@page "/profile/{page}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.Statistics
@using Elwark.Education.Web.Pages.Profile.Components
@layout ProfileLayout

@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@switch (_statistics.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_statistics.Error"/>
        break;

    case ResponseStatus.Success:
        <ProfileSubjectHeader SubjectType="@_subjectType" Selected="@(ProfileSubMenu.Statistics)"/>

        <MudText Typo="Typo.h5" Class="mb-2 mt-6">
            @L["Statistics:ByTopics"]
        </MudText>
        <ProfileTopicStatistics
            Statistics="@_statistics.Data.Topics"
            LinkBuilder="@(id => Links.Subjects.Topic(_subjectType, id))"/>

        <MudText Typo="Typo.h5" Class="mb-2 mt-12">
            @L["Statistics:ByArticles"]
        </MudText>
        <ProfileArticleStatistics
            Class="mb-6"
            Statistics="@_statistics.Data.Articles"
            LinkBuilder="@(id => Links.Subjects.Article(_subjectType, id))"/>
        break;
}

@code {

    [Parameter]
    public string Page { get; set; } = string.Empty;

    private SubjectType _subjectType;
    private ApiResponse<ContentStatistics> _statistics = ApiResponse<ContentStatistics>.Loading();

    protected override async Task OnInitializedAsync()
    {
        if (Enum.TryParse(Page, true, out _subjectType))
        {
            _statistics = _subjectType switch{
                SubjectType.History => await HistoryClient.GetMyStatisticsAsync(),
                _ => ApiResponse<ContentStatistics>.Fail(Error.NotFound)
                };
        }
        else
        {
            _statistics = ApiResponse<ContentStatistics>.Fail(Error.NotFound);
        }
    }

}