@page "/profile/{page}/tests"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.TestConclusion
@using Elwark.Education.Web.Pages.Profile.Components

@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@attribute [Authorize]

<ProfileSubjectHeader SubjectType="@_type" Selected="@(ProfileSubMenu.Tests)"/>
<div class="grid ma-6">
    <ApiResponsePageableViewer
        InitLoader="@(() => LoaderAsync(new PageableRequest(null, 20)))"
        AppendLoader="@(token => LoaderAsync(new PageableRequest(token, 20)))">
        <Loading>
            <CardsSkeleton/>
        </Loading>
        <Result Context="items">
            <Title Value="@L["CompletedTests"]"></Title>
            @{
                var date = DateTime.MinValue;
            }
            @foreach (var item in items)
            {
                if (date.Date != item.CreatedAt.Date)
                {
                    date = item.CreatedAt;
                    <div class="date-divider">
                        <div class="divider-text">
                            <MudText Typo="Typo.h4">
                                @item.CreatedAt.ToShortDateString()
                            </MudText>
                            <div class="divider-line"></div>
                        </div>
                    </div>
                }
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudLink Href="@Links.Profile.TestDetail(_type, item.TestId)" Typo="Typo.h6">
                                @if (item.Title is null)
                                {
                                    <em>
                                        @L["Deleted"]
                                    </em>
                                }
                                else
                                {
                                    @item.Title
                                }
                            </MudLink>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <TestConclusionOverviewItem
                            Status="@item.Status"
                            CompletedAt="@item.CreatedAt"
                            TimeSpent="@item.TimeSpent"
                            TotalScore="@item.UserScore.Total"
                            Details="@Links.Profile.TestDetail(_type, item.TestId)"/>
                    </MudCardContent>
                </MudCard>
            @*      *@
            @* <ProfileTestSummary Conclusion="@item" DetailLink="@Links.Profile.TestDetail(_type, item.TestId)"/>  *@
            @*      *@
            }
        </Result>
    </ApiResponsePageableViewer>
</div>

@code
{
    private SubjectType _type;

    [Parameter]
    public string Page { get; set; } = string.Empty;

    protected override void OnInitialized() =>
        Enum.TryParse(Page, true, out _type);

    private Task<ApiResponse<PageableResponse<TestConclusionSummary>>> LoaderAsync(PageableRequest request) =>
        _type switch{
            SubjectType.History => HistoryClient.GetMyTestConclusionsAsync(request),
            _ => Task.FromResult(ApiResponse<PageableResponse<TestConclusionSummary>>.Fail(Error.NotFound))
            };

}
