@page "/profile/{page}/tests"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.TestConclusion
@using Elwark.Education.Web.Pages.Profile.Components
@layout ProfileLayout

@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@attribute [Authorize]

<ProfileSubjectHeader SubjectType="@SubjectType.History" Selected="@(ProfileSubMenu.Tests)"/>
<ApiResponsePageableViewer
    InitLoader="@(() => LoaderAsync(new PageableRequest(null, 20)))" 
    AppendLoader="@(token => LoaderAsync(new PageableRequest(token, 20)))">
    <Loading>
        <MudText Typo="Typo.h5" Class="mb-2 mt-6">
            @L["CompletedTests"]
        </MudText>
        <CardsSkeleton/>
    </Loading>
    <Result Context="items">
        <Title Value="@L["CompletedTests"]"></Title>
        <MudText Typo="Typo.h5" Class="mb-2 mt-6">
            @L["CompletedTests"]
        </MudText>
        <div class="grid">
            @foreach (var item in items)
            {
                <ProfileTestSummary
                    Class="my-3"
                    Conclusion="@item"
                    DetailLink="@Links.Profile.TestDetail(_subjectType, item.TestId)"/>
            }
        </div>
    </Result>
</ApiResponsePageableViewer>

@code
{
    private SubjectType _subjectType;

    [Parameter]
    public string Page { get; set; } = string.Empty;

    protected override void OnInitialized() =>
        Enum.TryParse(Page, true, out _subjectType);

    private Task<ApiResponse<PageableResponse<TestConclusionSummary>>> LoaderAsync(PageableRequest request) =>
        _subjectType switch{
            SubjectType.History => HistoryClient.GetMyTestConclusionsAsync(request),
            _ => Task.FromResult(ApiResponse<PageableResponse<TestConclusionSummary>>.Fail(Error.NotFound))
            };
    
}