@page "/profile/{subject}/favorites"
@using Elwark.Education.Web.Gateways.History

@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@attribute [Authorize]

<ProfileSubjectHeader SubjectType="@_subject" Selected="@(ProfileSubMenu.Favorites)"/>
<div class="ma-6">
    <ApiResponsePageableViewer Loader="@(token => LoaderAsync(new PageRequest(token, 20)))">
        <Loading>
            <div class="grid">
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
            </div>
        </Loading>
        <Result Context="items">
            <Title Value="@L["Favorites"]"></Title>
            @if (items.Length > 0)
            {
                <div class="grid">
                    @foreach (var item in items)
                    {
                        <TopicCard
                            Id="@item.Id"
                            Href="@Links.History.Topics(item.Id)"
                            Image="@item.Image"
                            Title="@item.Title"
                            Subtitle="@item.Overview"
                            Rating="@item.Rating"
                            IsFavorite="@item.IsFavorite"
                            OnFavoriteClick="@OnFavoriteClick">
                            <ImageFooter>
                                <HistoryPeriodChip Class="ma-0" Period="@item.Period"/>
                            </ImageFooter>
                        </TopicCard>
                    }
                </div>
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    @L["Empty"]
                </MudText>
            }
        </Result>
    </ApiResponsePageableViewer>
</div>

@code
{
    private SubjectType _subject;

    [Parameter]
    public string Subject { get; set; } = string.Empty;

    protected override void OnInitialized() =>
        Enum.TryParse(Subject, true, out _subject);

    private Task<ApiResponse<PageResponse<TopicSummary>>> LoaderAsync(PageRequest request) =>
        _subject switch {
            SubjectType.History => HistoryClient.User.GetFavoritesAsync(request),
            _ => Task.FromResult(ApiResponse<PageResponse<TopicSummary>>.Fail(Error.NotFound))
            };

    private async Task<bool> OnFavoriteClick(string topicId)
    {
        var result = await HistoryClient.Topic.ToggleFavoriteAsync(topicId);
        return result.Status == ResponseStatus.Success && result.Data;
    }

}
