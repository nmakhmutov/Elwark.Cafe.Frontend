@page "/profile/{subject}/tests"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.TestConclusion

@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@attribute [Authorize]

<ProfileSubjectHeader SubjectType="@_subject" Selected="@(ProfileSubMenu.Tests)"/>
<div class="grid ma-6">
    <ApiResponsePageableViewer Loader="@(token => LoaderAsync(new PageRequest(token, 20)))">
        <Loading>
            <SkeletonCard Class="mb-3"/>
            <SkeletonCard Class="mb-3"/>
            <SkeletonCard Class="mb-3"/>
        </Loading>
        <Result Context="items">
            <Title Value="@L["CompletedTests"]"></Title>
            @if (items.Length > 0)
            {
                var date = DateTime.MinValue;

                @foreach (var item in items)
                {
                    if (date.Date != item.CreatedAt.Date)
                    {
                        date = item.CreatedAt;
                        <div class="date-divider">
                            <div class="divider-text">
                                <MudText Typo="Typo.h4">
                                    @item.CreatedAt.ToShortDateString()
                                </MudText>
                                <div class="divider-line"></div>
                            </div>
                        </div>
                    }
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudLink Href="@Links.Profile.TestDetail(_subject, item.TestId)" Typo="Typo.h6">
                                    @if (item.Title is null)
                                    {
                                        <em>
                                            @L["Deleted"]
                                        </em>
                                    }
                                    else
                                    {
                                        @item.Title
                                    }
                                </MudLink>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <TestConclusionItem
                                Status="@item.Status"
                                CompletedAt="@item.CreatedAt"
                                TimeSpent="@item.TimeSpent"
                                TotalScore="@item.UserScore.Total"
                                Details="@Links.Profile.TestDetail(_subject, item.TestId)"/>
                        </MudCardContent>
                    </MudCard>
                }
            }
            else
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1">
                    @L["Empty"]
                </MudText>
            }
        </Result>
    </ApiResponsePageableViewer>
</div>

@code
{
    private SubjectType _subject;

    [Parameter]
    public string Subject { get; set; } = string.Empty;

    protected override void OnInitialized() =>
        Enum.TryParse(Subject, true, out _subject);

    private Task<ApiResponse<PageResponse<TestConclusionSummary>>> LoaderAsync(PageRequest request) =>
        _subject switch{
            SubjectType.History => HistoryClient.User.GetTestConclusionsAsync(request),
            _ => Task.FromResult(ApiResponse<PageResponse<TestConclusionSummary>>.Fail(Error.NotFound))
            };

}
