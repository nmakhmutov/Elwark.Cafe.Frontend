@page "/profile/history/tests"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways
@using Elwark.Education.Web.Gateways.Models.TestConclusion
@layout ProfileLayout

@inject IHistoryService HistoryService
@inject IStringLocalizer<ProfileLayout> L
@inject IStringLocalizer<App> Al

@attribute [Authorize]

@switch (_tests.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_tests.Error"/>
        break;

    case ResponseStatus.Success:
        <div class="d-flex flex-row align-center">
            <MudLink Href="@Links.Profile.Index" Class="d-flex mr-3" Color="Color.Default">
                <MudIcon Icon="@Filled.ArrowBack" Size="Size.Medium"/>
            </MudLink>
            <MudText Typo="Typo.h5">
                @Al["History"]
            </MudText>
        </div>
        @foreach (var item in _tests.Data.Items)
        {
            <h1>@item.Title</h1>
            @(item switch{
                ArticleTestConclusion x => Links.History.Article(x.ArticleId),
                TopicTestConclusion x => Links.History.Topic(x.TopicId),
                _ => throw new ArgumentOutOfRangeException(nameof(item))
                })
        }
        break;
}

@code
{
    ApiResponse<PageableResponse<TestConclusion>> _tests = ApiResponse<PageableResponse<TestConclusion>>.Loading();

    protected override async Task OnInitializedAsync()
    {
        _tests = await HistoryService.GetTestConclusionsAsync(new PageableRequest(null, 20));
    }
}