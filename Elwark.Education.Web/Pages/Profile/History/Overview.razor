@page "/profile/history"
@layout ProfileLayout
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.TestConclusion
@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@switch (_overview.Status)
{
    case ResponseStatus.Loading:
        <PageLoader/>
        break;

    case ResponseStatus.Fail:
        <ErrorPage Error="_overview.Error"/>
        break;

    case ResponseStatus.Success:
        <MudText Typo="Typo.h2" Align="Align.Center">
            @L["History"]
        </MudText>

        <MudText Typo="Typo.h5" Class="mb-2 mt-6">
            Statistics by topics
        </MudText>
        <StatisticsDetailGrid Statistics="@_overview.Data.Statistics.Topics" LinkBuilder="@((string id) => Links.History.Topic(id))"/>

        <MudText Typo="Typo.h5" Class="mb-2 mt-12">
            Statistics by articles
        </MudText>
        <StatisticsDetailGrid Statistics="@_overview.Data.Statistics.Articles" LinkBuilder="@((string id) => Links.History.Article(id))"/>

        <MudText Typo="Typo.h5" Class="mb-2 mt-12">
            @L["Tests"]
        </MudText>
        <MudTable Items="@_overview.Data.TestConclusions" Hover="true" Class="mb-6">
            <HeaderContent>
                <MudTh>@L["Title"]</MudTh>
                <MudTh>Complete</MudTh>
                <MudTh>@L["ElapsedTime"]</MudTh>
                <MudTh>@L["Score"]</MudTh>
                <MudTh>@L["Created"]</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@L["Title"]">
                    @if (context.Title is null)
                    {
                        <MudText Typo="Typo.subtitle1">
                            @L["Deleted"]
                        </MudText>                    }
                    else
                    {
                        var link = context switch {
                            ArticleTestConclusion x => Links.History.Article(x.ArticleId),
                            TopicTestConclusion x => Links.History.Topic(x.TopicId),
                            _ => throw new ArgumentOutOfRangeException(nameof(context), context, null)
                            };

                        <MudLink Href="@link" Typo="Typo.subtitle1">
                            @context.Title
                        </MudLink>                    }
                </MudTd>
                <MudTd DataLabel="Complete">
                    <MudCheckBox Checked="@context.IsComplete" Color="Color.Primary" Disabled="true"/>
                </MudTd>
                <MudTd DataLabel="@L["ElapsedTime"]">
                    @context.ElapsedTime.ToSimpleFormat()
                </MudTd>
                <MudTd DataLabel="@L["Score"]">
                    @context.Score.Total
                </MudTd>
                <MudTd DataLabel="@L["Created"]">
                    @context.CreatedAt.ToSimpleFormat()
                </MudTd>
                <MudTd Style="text-align: right">
                    <MudButton Color="Color.Default" EndIcon="@Filled.ChevronRight" Link="@(Links.Profile.TestDetail(Subject.History, context.TestId))">
                        @L["Detail"]
                    </MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <div class="d-flex justify-end px-4 py-3">
                    <MudButton Color="Color.Default" EndIcon="@Filled.ChevronRight" Link="@(Links.Profile.Tests(Subject.History))">
                        @L["SeeAll"]
                    </MudButton>
                </div>
            </PagerContent>
        </MudTable>
        break;
}

@code {

    private ApiResponse<SubjectAggregate> _overview = ApiResponse<SubjectAggregate>.Loading();

    protected override async Task OnInitializedAsync() =>
        _overview = await HistoryClient.GetMyOverviewAsync();

}