@page "/profile/history/statistics/topic/{id}"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.History.Me
@layout ProfileLayout

@attribute [Authorize]

<CenteredContainer MaxWidth="ContainerWidth.W1280" Class="pa-0">
    <ApiResponseViewer Response="@_response">
        <Placeholder>
            <div class="d-flex justify-center mb-3">
                <MudSkeleton SkeletonType="SkeletonType.Text" Height="35px" Width="80%"/>
            </div>
            <DefaultFillGrid>
                <SkeletonCard/>
                <SkeletonCard/>
                <SkeletonCard/>
            </DefaultFillGrid>
        </Placeholder>
        <Result Context="result">
            <Title Value="@result.Topic.Title"></Title>

            @Header(new HeaderProps(L["Tests:Easy"], Links.Profile.History.EasyTestStatistics, L["TimeSpent"], result.EasyTest.TimeSpent))
            <DefaultFillGrid Class="mb-3 mb-sm-6">
                <StatisticsCard Icon="@Icons.Filled.School" Title="@L["Tests"]" Subtitle="@result.EasyTest.NumberOfTests.Total.ToReadable()">
                    <NumberOfTestChart Value="@result.EasyTest.NumberOfTests"/>
                </StatisticsCard>
                <StatisticsCard Icon="@Icons.Filled.PendingActions" Title="@L["Score"]" Subtitle="@result.EasyTest.Score.Total.ToReadable()">
                    <ScoreChart Value="@result.EasyTest.Score"/>
                </StatisticsCard>
                <StatisticsCard Icon="@Icons.Filled.HelpOutline" Title="@L["Questions"]" Subtitle="@result.EasyTest.AnswerRatio.Questions.ToReadable()">
                    <AnswerRatioChart Value="@result.EasyTest.AnswerRatio"/>
                </StatisticsCard>
            </DefaultFillGrid>

            @if (result.EasyTest.Conclusions.Length > 0)
            {
                <MudExpansionPanels>
                    @foreach (var conclusion in result.EasyTest.Conclusions)
                    {
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudText Typo="Typo.subtitle1" Class="mr-3">
                                        @conclusion.CompletedAt.ToSimpleFormat()
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle1" Color="@conclusion.Status.GetColor()">
                                        @L[$"ConclusionStatus:{conclusion.Status}"]
                                    </MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <TestConclusionList
                                    TimeSpent="@conclusion.TimeSpent"
                                    Score="@conclusion.Score"
                                    AnswerRatio="@conclusion.AnswerRatio"/>
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            }

            <div class="py-6"></div>
            @Header(new HeaderProps(L["Tests:Hard"], Links.Profile.History.HardTestStatistics, L["TimeSpent"], result.HardTest.TimeSpent))
            <DefaultFillGrid Class="mb-3 mb-sm-6">
                <StatisticsCard Icon="@Icons.Filled.School" Title="@L["Tests"]" Subtitle="@result.HardTest.NumberOfTests.Total.ToReadable()">
                    <NumberOfTestChart Value="@result.HardTest.NumberOfTests"/>
                </StatisticsCard>
                <StatisticsCard Icon="@Icons.Filled.PendingActions" Title="@L["Score"]" Subtitle="@result.HardTest.Score.Total.ToReadable()">
                    <ScoreChart Value="@result.HardTest.Score"/>
                </StatisticsCard>
                <StatisticsCard Icon="@Icons.Filled.HelpOutline" Title="@L["Questions"]" Subtitle="@result.HardTest.AnswerRatio.Questions.ToReadable()">
                    <AnswerRatioChart Value="@result.HardTest.AnswerRatio"/>
                </StatisticsCard>
            </DefaultFillGrid>

            @if (result.HardTest.Conclusions.Length > 0)
            {
                <MudExpansionPanels>
                    @foreach (var conclusion in result.HardTest.Conclusions)
                    {
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudText Typo="Typo.subtitle1" Class="mr-3">
                                        @conclusion.CompletedAt.ToSimpleFormat()
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle1" Color="@conclusion.Status.GetColor()">
                                        @L[$"ConclusionStatus:{conclusion.Status}"]
                                    </MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <TestConclusionList
                                    TimeSpent="@conclusion.TimeSpent"
                                    Score="@conclusion.Score"
                                    AnswerRatio="@conclusion.AnswerRatio"/>
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            }
        </Result>
    </ApiResponseViewer>
</CenteredContainer>


@* ReSharper disable InconsistentNaming *@
@* ReSharper disable once UnusedParameter.Local *@

@code {

    private ApiResponse<TopicStatistics> _response = ApiResponse<TopicStatistics>.Loading();

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;

    [Inject]
    private IHistoryClient HistoryClient { get; set; } = default!;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync() =>
        _response = await HistoryClient.Me.GetTopicStatisticsAsync(Id);

    private readonly RenderFragment<HeaderProps> Header = message => __builder =>
    {
        <div class="d-flex flex-wrap align-center justify-space-between mb-3">
            <MudLink Href="@message.Link" Typo="Typo.h5">
                @message.Title
            </MudLink>
            <div class="d-flex align-center">
                <MudTooltip Text="@message.Tooltip">
                    <MudText Typo="Typo.h5" Class="mr-3">
                        @message.TimeSpent.ToSimpleFormat()
                    </MudText>
                </MudTooltip>
                <MudAvatar Color="Color.Primary" Size="Size.Medium">
                    <MudIcon Icon="@Icons.Filled.Timer" Size="Size.Medium"/>
                </MudAvatar>
            </div>
        </div>
    };

    private sealed record HeaderProps(LocalizedString Title, string Link, LocalizedString Tooltip, TimeSpan TimeSpent);

}
