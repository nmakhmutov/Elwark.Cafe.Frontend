@page "/profile/history/statistics"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.History.Me
@using Elwark.Education.Web.Gateways.Models.Statistics
@layout ProfileLayout

@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@attribute [Authorize]

<ApiResponseViewer Response="@_response">
    <Placeholder>
        <div class="mb-3 mb-sm-6">
            <MudSkeleton SkeletonType="SkeletonType.Text" Height="35px" Width="80%"/>
        </div>
        <div class="grid">
            <SkeletonCard/>
            <SkeletonCard/>
            <SkeletonCard/>
            <SkeletonCard/>
        </div>
    </Placeholder>
    <Result Context="result">
        <Title Value="@L["Statistics"]"/>

        <MudText Typo="Typo.h5" Class="mb-3 mb-sm-6">
            @L["Tests:Easy"]
        </MudText>
        <div class="grid mb-12">
            <StatisticsCard Icon="@Icons.Filled.School" Title="@L["Tests:Easy"]" Subtitle="@result.EasyTest.NumberOfTests.Total.Total.ToReadable()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@RangeTitle(result.EasyTest.NumberOfTests.Progress)"/>
                <OverviewList Items="@GetOverview(result.EasyTest.NumberOfTests.Progress)"/>
            </StatisticsCard>
            <StatisticsCard Icon="@Icons.Filled.PendingActions" Title="@L["Score"]" Subtitle="@result.EasyTest.Score.Total.Total.ToReadable()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@RangeTitle(result.EasyTest.Score.Progress)"/>
                <OverviewList Items="@GetOverview(result.EasyTest.Score.Progress)"/>
            </StatisticsCard>
            <StatisticsCard Icon="@Icons.Filled.HelpOutline" Title="@L["Questions"]" Subtitle="@result.EasyTest.AnswerRatio.Total.Questions.ToReadable()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@RangeTitle(result.EasyTest.AnswerRatio.Progress)"/>
                <OverviewList Items="@GetOverview(result.EasyTest.AnswerRatio.Progress)"/>
            </StatisticsCard>
            <StatisticsCard Icon="@Icons.Filled.Timer" Title="@L["TimeSpent"]" Subtitle="@result.EasyTest.TimeSpent.Total.ToSimpleFormat()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@RangeTitle(result.EasyTest.TimeSpent.Progress)"/>
                <OverviewList Items="@GetOverview(result.EasyTest.TimeSpent.Progress)"/>
            </StatisticsCard>
        </div>

        <MudText Typo="Typo.h5" Class="mb-3 mb-sm-6">
            @L["Tests:Hard"]
        </MudText>
        <div class="grid">
            <StatisticsCard Icon="@Icons.Filled.School" Title="@L["Tests:Hard"]" Subtitle="@result.HardTest.NumberOfTests.Total.Total.ToReadable()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@(RangeTitle(result.HardTest.NumberOfTests.Progress))"/>
                <OverviewList Items="@GetOverview(result.HardTest.NumberOfTests.Progress)"/>
            </StatisticsCard>
            <StatisticsCard Icon="@Icons.Filled.PendingActions" Title="@L["Score"]" Subtitle="@result.HardTest.Score.Total.Total.ToReadable()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@(RangeTitle(result.HardTest.Score.Progress))"/>
                <OverviewList Items="@GetOverview(result.HardTest.Score.Progress)"/>
            </StatisticsCard>
            <StatisticsCard Icon="@Icons.Filled.HelpOutline" Title="@L["Questions"]" Subtitle="@result.HardTest.AnswerRatio.Total.Questions.ToReadable()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@RangeTitle(result.HardTest.AnswerRatio.Progress)"/>
                <OverviewList Items="@GetOverview(result.HardTest.AnswerRatio.Progress)"/>
            </StatisticsCard>
            <StatisticsCard Icon="@Icons.Filled.Timer" Title="@L["TimeSpent"]" Subtitle="@result.HardTest.TimeSpent.Total.ToSimpleFormat()">
                <WidgetSubheader Title="@L["Progress"]" Subtitle="@RangeTitle(result.HardTest.TimeSpent.Progress)"/>
                <OverviewList Items="@GetOverview(result.HardTest.TimeSpent.Progress)"/>
            </StatisticsCard>
        </div>
    </Result>
</ApiResponseViewer>

@code {

    private ApiResponse<UserStatistics> _response = ApiResponse<UserStatistics>.Loading();

    protected override async Task OnParametersSetAsync() => _response = await HistoryClient.Me.GetStatisticsAsync();

    private static string RangeTitle(NumberOfTestsProgress progress) =>
        RangeTitle(progress.Starts, progress.Ends);

    private static string RangeTitle(ScoreProgress progress) =>
        RangeTitle(progress.Starts, progress.Ends);

    private static string RangeTitle(TimeSpentProgress progress) =>
        RangeTitle(progress.Starts, progress.Ends);

    private static string RangeTitle(AnswerRatioProgress progress) =>
        RangeTitle(progress.Starts, progress.Ends);

    private static string RangeTitle(DateTime starts, DateTime ends) =>
        $"{starts:dd MMM} â€• {ends:dd MMM}";

    private OverviewList.Item[] GetOverview(NumberOfTestsProgress progress) => new OverviewList.Item[]
    {
        new(L["NumberOfTests:Total"], progress.Total.Current.ToReadable(), progress.Total.Difference),
        new(L["NumberOfTests:Completed"], progress.Completed.Current.ToReadable(), progress.Completed.Difference),
        new(L["NumberOfTests:TimeExceeded"], progress.TimeExceeded.Current.ToReadable(), progress.TimeExceeded.Difference),
        new(L["NumberOfTests:RepliesExceeded"], progress.RepliesExceeded.Current.ToReadable(), progress.RepliesExceeded.Difference)
    };

    private OverviewList.Item[] GetOverview(ScoreProgress progress) => new OverviewList.Item[]
    {
        new(L["Score:Total"], progress.Total.Current.ToReadable(), progress.Total.Difference),
        new(L["Score:ByQuestions"], progress.Questions.Current.ToReadable(), progress.Questions.Difference),
        new(L["Score:NoMistakesBonus"], progress.NoMistakes.Current.ToReadable(), progress.NoMistakes.Difference),
        new(L["Score:BySpeedBonus"], progress.Speed.Current.ToReadable(), progress.Speed.Difference)
    };

    private OverviewList.Item[] GetOverview(TimeSpentProgress progress) => new OverviewList.Item[]
    {
        new(L["TimeSpent"], progress.TimeSpent.Current.ToSimpleFormat(), progress.TimeSpent.Difference)
    };

    private OverviewList.Item[] GetOverview(AnswerRatioProgress progress) => new OverviewList.Item[]
    {
        new(L["Questions:Total"], progress.Questions.Current.ToReadable(), progress.Questions.Difference),
        new(L["Questions:Correct"], progress.Correct.Current.ToReadable(), progress.Questions.Difference),
        new(L["Questions:Incorrect"], progress.Incorrect.Current.ToReadable(), progress.Incorrect.Difference),
        new(L["Questions:Answered"], progress.Answered.Current.ToReadable(), progress.Answered.Difference),
        new(L["Questions:NotAnswered"], progress.NotAnswered.Current.ToReadable(), progress.NotAnswered.Difference)
    };

}
