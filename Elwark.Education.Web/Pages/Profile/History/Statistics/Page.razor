@page "/profile/history/statistics"
@using Elwark.Education.Web.Gateways.History
@using Elwark.Education.Web.Gateways.Models.Statistics
@layout ProfileLayout

@inject IHistoryClient HistoryClient
@inject IStringLocalizer<App> L

@attribute [Authorize]

<div class="grid">
<ApiResponseViewer Response="@_response">
<Placeholder>
    <SkeletonCard/>
    <SkeletonCard/>
    <SkeletonCard/>
    <SkeletonCard/>
</Placeholder>
<Result Context="result">
<Title Value="@L["Statistics"]"></Title>

@foreach (var (difficulty, (numberOfTests, progress, ranking)) in result.NumberOfTests)
{
    <WidgetContainer Title="@L[$"Tests:{difficulty}"]" Icon="@Icons.Filled.School" Total="@numberOfTests.Total.ToReadable()">
        <Score>
            <div class="details">
                <div>
                    <MudText Typo="Typo.subtitle1">
                        @L["NumberOfTests:Completed"]
                    </MudText>
                    <MudText Typo="Typo.h5">
                        @numberOfTests.Completed.ToReadable()
                    </MudText>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle1">
                        @L["NumberOfTests:TimeExceeded"]
                    </MudText>
                    <MudText Typo="Typo.h5">
                        @numberOfTests.TimeExceeded.ToReadable()
                    </MudText>
                </div>
                <div>
                    <MudText Typo="Typo.subtitle1">
                        @L["NumberOfTests:RepliesExceeded"]
                    </MudText>
                    <MudText Typo="Typo.h5">
                        @numberOfTests.RepliesExceeded.ToReadable()
                    </MudText>
                </div>
            </div>
        </Score>
        <Ranking>
            <div class="widget-subheader">
                <MudText Typo="Typo.h6">
                    @L["Ranking"]
                </MudText>
                <MudText Typo="Typo.body2">
                    @L["ForAllTime"]
                </MudText>
            </div>
            @if (ranking.Length > 0)
            {
                <RankingList
                    Class="mb-3"
                    Items="@ranking"
                    LinkBuilder="@((string id) => Links.Subjects.Topic(SubjectType.History, id))"
                    ValueConverter="@((NumberOfTests arg) => arg.Total.ToReadable())"/>
            }
            else
            {
                <MudText Typo="Typo.subtitle1" Align="Align.Center">
                    @L["Ranking:Empty"]
                </MudText>
            }
        </Ranking>
        <Statistics>
            <div class="widget-subheader">
                <MudText Typo="Typo.h6">
                    @L["Progress"]
                </MudText>
                <MudText Typo="Typo.body2">
                    @progress.Starts.ToString("dd MMM") - @progress.Ends.ToString("dd MMM")
                </MudText>
            </div>
            <OverviewList Class="mb-3" Items="@GetOverview(progress)"/>
        </Statistics>
    </WidgetContainer>
}

<WidgetContainer Title="@L["Score"]" Icon="@Icons.Filled.PendingActions" Total="@result.Score.Total.Total.ToReadable()">
    <Score>
        <div class="details">
            <div>
                <MudText Typo="Typo.subtitle1">
                    @L["Score:ByQuestions"]
                </MudText>
                <MudText Typo="Typo.h5">
                    @result.Score.Total.Questions.ToReadable()
                </MudText>
            </div>
            <div>
                <MudText Typo="Typo.subtitle1">
                    @L["Score:NoMistakesBonus"]
                </MudText>
                <MudText Typo="Typo.h5">
                    @result.Score.Total.NoMistakes.ToReadable()
                </MudText>
            </div>
            <div>
                <MudText Typo="Typo.subtitle1">
                    @L["Score:BySpeedBonus"]
                </MudText>
                <MudText Typo="Typo.h5">
                    @result.Score.Total.Speed.ToReadable()
                </MudText>
            </div>
        </div>
    </Score>
    <Ranking>
        <div class="widget-subheader">
            <MudText Typo="Typo.h6">
                @L["Ranking"]
            </MudText>
            <MudText Typo="Typo.body2">
                @L["ForAllTime"]
            </MudText>
        </div>
        @if (result.Score.Ranking.Length > 0)
        {
            <RankingList
                Class="mb-3"
                Items="@result.Score.Ranking"
                LinkBuilder="@((string id) => Links.Subjects.Topic(SubjectType.History, id))"
                ValueConverter="@((Score arg) => arg.Total.ToReadable())"/>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Align="Align.Center">
                @L["Ranking:Empty"]
            </MudText>
        }
    </Ranking>
    <Statistics>
        <div class="widget-subheader">
            <MudText Typo="Typo.h6">
                @L["Progress"]
            </MudText>
            <MudText Typo="Typo.body2">
                @result.Score.Progress.Starts.ToString("dd MMM") - @result.Score.Progress.Ends.ToString("dd MMM")
            </MudText>
        </div>
        <OverviewList Class="mb-3" Items="@GetOverview(result.Score.Progress)"/>
    </Statistics>
</WidgetContainer>

<WidgetContainer Title="@L["TimeSpent"]" Icon="@Icons.Filled.Timer" Total="@result.TimeSpent.Total.ToSimpleFormat()">
    <Ranking>
        <div class="widget-subheader">
            <MudText Typo="Typo.h6">
                @L["Ranking"]
            </MudText>
            <MudText Typo="Typo.body2">
                @L["ForAllTime"]
            </MudText>
        </div>
        @if (result.TimeSpent.Ranking.Length > 0)
        {
            <RankingList
                Class="mb-3"
                Items="@result.TimeSpent.Ranking"
                LinkBuilder="@((string id) => Links.Subjects.Topic(SubjectType.History, id))"
                ValueConverter="@((TimeSpan arg) => arg.ToSimpleFormat())"/>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Align="Align.Center">
                @L["Ranking:Empty"]
            </MudText>
        }
    </Ranking>
    <Statistics>
        <div class="widget-subheader">
            <MudText Typo="Typo.h6">
                @L["Progress"]
            </MudText>
            <MudText Typo="Typo.body2">
                @result.TimeSpent.Progress.Starts.ToString("dd MMM") - @result.TimeSpent.Progress.Ends.ToString("dd MMM")
            </MudText>
        </div>
        <OverviewList Class="mb-3" Items="@GetOverview(result.TimeSpent.Progress)"/>
    </Statistics>
</WidgetContainer>

<WidgetContainer Title="@L["Questions"]" Icon="@Icons.Filled.HelpOutline" Total="@result.AnswerRatio.Total.Questions.ToReadable()">
    <Score>
        <div class="details">
            <div>
                <MudText Typo="Typo.subtitle1">
                    @L["Questions:Correct"]
                </MudText>
                <MudText Typo="Typo.h5">
                    @result.AnswerRatio.Total.Correct.ToReadable()
                </MudText>
            </div>
            <div>

                <MudText Typo="Typo.body1">
                    @L["Questions:Incorrect"]
                </MudText>
                <MudText Typo="Typo.h5">
                    @result.AnswerRatio.Total.Incorrect.ToReadable()
                </MudText>
            </div>
            <div>

                <MudText Typo="Typo.subtitle1">
                    @L["Questions:Answered"]
                </MudText>
                <MudText Typo="Typo.h5">
                    @result.AnswerRatio.Total.Answered.ToReadable()
                </MudText>
            </div>
            <div>
                <MudText Typo="Typo.subtitle1">
                    @L["Questions:NotAnswered"]
                </MudText>
                <MudText Typo="Typo.h5">
                    @result.AnswerRatio.Total.NotAnswered.ToReadable()
                </MudText>
            </div>
        </div>
    </Score>
    <Statistics>
        <div class="widget-subheader">
            <MudText Typo="Typo.h6">
                @L["Progress"]
            </MudText>
            <MudText Typo="Typo.body2">
                @result.AnswerRatio.Progress.Starts.ToString("dd MMM") - @result.AnswerRatio.Progress.Ends.ToString("dd MMM")
            </MudText>
        </div>
        <OverviewList Class="mb-3" Items="@GetOverview(result.AnswerRatio.Progress)"/>
    </Statistics>
</WidgetContainer>

</Result>
</ApiResponseViewer>
</div>

@code {

    private ApiResponse<UserStatistics> _response = ApiResponse<UserStatistics>.Loading();

    protected override async Task OnParametersSetAsync() => _response = await HistoryClient.User.GetStatisticsAsync();

    private OverviewList.Item[] GetOverview(ScoreProgress progress) => new OverviewList.Item[]
    {
        new(L["Score:Total"], progress.Total.Current.ToReadable(), progress.Total.Difference),
        new(L["Score:ByQuestions"], progress.Questions.Current.ToReadable(), progress.Questions.Difference),
        new(L["Score:NoMistakesBonus"], progress.NoMistakes.Current.ToReadable(), progress.NoMistakes.Difference),
        new(L["Score:BySpeedBonus"], progress.Speed.Current.ToReadable(), progress.Speed.Difference)
    };

    private OverviewList.Item[] GetOverview(TimeSpentProgress progress) => new OverviewList.Item[]
    {
        new(L["TimeSpent"], progress.TimeSpent.Current.ToSimpleFormat(), progress.TimeSpent.Difference)
    };

    private OverviewList.Item[] GetOverview(NumberOfTestsProgress progress) => new OverviewList.Item[]
    {
        new(L["NumberOfTests:Total"], progress.Total.Current.ToReadable(), progress.Total.Difference),
        new(L["NumberOfTests:Completed"], progress.Completed.Current.ToReadable(), progress.Completed.Difference),
        new(L["NumberOfTests:TimeExceeded"], progress.TimeExceeded.Current.ToReadable(), progress.TimeExceeded.Difference),
        new(L["NumberOfTests:RepliesExceeded"], progress.RepliesExceeded.Current.ToReadable(), progress.RepliesExceeded.Difference)
    };

    private OverviewList.Item[] GetOverview(AnswerRatioProgress progress) => new OverviewList.Item[]
    {
        new(L["Questions:Total"], progress.Questions.Current.ToReadable(), progress.Questions.Difference),
        new(L["Questions:Correct"], progress.Correct.Current.ToReadable(), progress.Questions.Difference),
        new(L["Questions:Incorrect"], progress.Incorrect.Current.ToReadable(), progress.Incorrect.Difference),
        new(L["Questions:Answered"], progress.Answered.Current.ToReadable(), progress.Answered.Difference),
        new(L["Questions:NotAnswered"], progress.NotAnswered.Current.ToReadable(), progress.NotAnswered.Difference)
    };

}
