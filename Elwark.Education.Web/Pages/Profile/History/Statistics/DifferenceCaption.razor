@* ReSharper disable once CheckNamespace *@
@namespace Elwark.Education.Web.Components

@using Elwark.Education.Web.Gateways.Models.Statistics
@typeparam T1
@typeparam T2
@inject IStringLocalizer<App> L

<div>
    <MudText Typo="Typo.body1" Class="d-inline-flex">
        <strong class="pr-2">
            @CurrentConverter(Current)
        </strong>
        @switch (DifferenceState)
        {
            case Ordering.Less:
                <MudText Typo="Typo.body1" Color="Color.Error">
                    @DifferenceConverter(Difference)
                </MudText>
                <MudIcon Icon="@Icons.Filled.KeyboardArrowDown" Color="Color.Error"/>
                break;

            case Ordering.Equal:
                <MudText Typo="Typo.body1" Color="Color.Primary">
                    @DifferenceConverter(Difference)
                </MudText>
                <MudIcon Icon="@Icons.Filled.CompareArrows" Class="pl-1" Color="Color.Primary"/>
                break;

            case Ordering.Greater:
                <MudText Typo="Typo.body1" Color="Color.Success">
                    +@DifferenceConverter(Difference)
                </MudText>
                <MudIcon Icon="@Icons.Filled.KeyboardArrowUp" Color="Color.Success"/>
                break;
        }
    </MudText>
    <MudText Typo="Typo.body2">
        @L["CurrentWeek"]
    </MudText>
</div>

@code {

    private Ordering DifferenceState => (Ordering) Comparer<T2>.Default.Compare(Difference, default);

    [Parameter]
    public T1 Current { get; set; } = default!;

    [Parameter]
    public T2 Difference { get; set; } = default!;

    [Parameter]
    public Func<T1, string> CurrentConverter { get; set; } = x => x?.ToString() ?? string.Empty;

    [Parameter]
    public Func<T2, string> DifferenceConverter { get; set; } = x => x?.ToString() ?? string.Empty;

}
