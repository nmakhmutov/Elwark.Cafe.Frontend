@using Elwark.Education.Web.Gateways.Models.User
@using System.Text.Encodings.Web
@inject IStringLocalizer<App> L

<MudCard Class="d-flex flex-column">
    <MudCardHeader>
        <CardHeaderAvatar>
            <SubjectIcon Subject="@Subscription.Subject" Size="@Size.Medium"/>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudLink Typo="Typo.body1" Href="@Links.Subjects.Index(Subscription.Subject)">
                @L[Subscription.Subject.ToString()]
            </MudLink>
            <MudText Typo="Typo.body2" Color="@Color">
                @L[$"Subscription:{Subscription.Type}"]
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Filled.Settings" Color="Color.Default"/>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image="@("images/subjects/" + Subscription.Subject.ToString().ToLower() + ".jpg")" Height="200"/>
    <MudCardContent Class="flex-grow-1">
        <div class="content-grid">
            <div class="d-flex flex-row justify-space-between align-center">
                <MudText Typo="Typo.body1">
                    @L["Subscription"]
                </MudText>
                <MudChip Color="@Color" Size="Size.Small" Label="true" Class="ma-0">
                    @L[$"Subscription:{Subscription.Type}"]
                </MudChip>
            </div>
            <div class="d-flex flex-row justify-space-between align-center">
                @if (Subscription.ExpiredAt.HasValue)
                {
                    <MudText Typo="Typo.body2">
                        @L["Subscription:EndsAt", Subscription.ExpiredAt.Value.ToSimpleFormat()]
                    </MudText>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="@OnProlong">
                        @L["Subscription:Prolong"]
                    </MudButton>
                }
                else
                {
                    <MudText Typo="Typo.body2">
                        @L["Subscription:Upgrade"]
                    </MudText>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="@OnBuy">
                        @L["Subscription:Buy"]
                    </MudButton>
                }
            </div>
            <MudDivider DividerType="DividerType.FullWidth"/>
            <div class="d-flex flex-row justify-space-between align-center">
                <div>
                    <MudText Typo="Typo.body1">
                        @L["Subscription:TestRestriction"]
                    </MudText>
                    @if (Subscription.TestCreating.RestoreAt.HasValue)
                    {
                        <MudText Typo="Typo.caption">
                            <em>
                                @L["Subscription:RestrictionRestoreAt", Subscription.TestCreating.RestoreAt.Value.ToSimpleFormat()]
                            </em>
                        </MudText>
                    }
                </div>
                <MudText Typo="Typo.h6">
                    @(Subscription.TestCreating.Quantity < 0 ? "∞" : Subscription.TestCreating.Quantity)
                </MudText>
            </div>
            <div class="d-flex flex-row justify-space-between align-center">
                <div>
                    <MudText Typo="Typo.body1">
                        @L["Subscription:AnswerRestriction"]
                    </MudText>
                    @if (Subscription.TestAnswering.RestoreAt.HasValue)
                    {
                        <MudText Typo="Typo.caption">
                            <em>
                                @L["Subscription:RestrictionRestoreAt", Subscription.TestAnswering.RestoreAt.Value.ToSimpleFormat()]
                            </em>
                        </MudText>
                    }
                </div>
                <MudText Typo="Typo.h6">
                    @(Subscription.TestAnswering.Quantity < 0 ? "∞" : Subscription.TestAnswering.Quantity)
                </MudText>
            </div>
        </div>
    </MudCardContent>
    <MudCardActions>
        <MudTooltip Text="@L["Statistics"]">
            <MudIconButton Link="@(Links.Profile.Statistics(Subscription.Subject))" Icon="@Filled.BarChart"/>
        </MudTooltip>
        <MudTooltip Text="@L["Tests"]">
            <MudIconButton Link="@(Links.Profile.Tests(Subscription.Subject))" Icon="@Filled.Class"/>
        </MudTooltip>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public Subscription Subscription { get; set; } = default!;

    [Parameter]
    public EventCallback<Subject> OnBuyClick { get; set; }

    [Parameter]
    public EventCallback<Subject> OnProlongClick { get; set; }

    private Task OnBuy() =>
        OnBuyClick.InvokeAsync(Subscription.Subject);

    private Task OnProlong() =>
        OnProlongClick.InvokeAsync(Subscription.Subject);

    private Color Color => Subscription.Type switch{
        SubscriptionType.Free => Color.Default,
        SubscriptionType.Basic => Color.Tertiary,
        SubscriptionType.Advanced => Color.Warning,
        _ => Color.Default
        };

}