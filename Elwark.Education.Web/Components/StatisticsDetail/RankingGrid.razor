@using Elwark.Education.Web.Gateways.Models.Statistics
@typeparam TItem
@inject IStringLocalizer<App> L

<div class="grid">
    <div>
        <MudText Typo="Typo.h6">@L["Bests"]</MudText>
        @if (Ranking.Bests.Length == 0)
        {
            @L["NoDataYet"]
        }
        else
        {
            for (var i = 0; i < Ranking.Bests.Length; i++)
            {
                var position = i;
                var color = position switch{
                    0 => Colors.Amber.Accent2,
                    1 => Colors.BlueGrey.Lighten2,
                    2 => Colors.Orange.Darken3,
                    _ => Colors.Grey.Lighten1
                    };
                <div class="d-flex flex-row align-center mt-2">
                    <MudAvatar Square="false" Class="mr-2" Style="@("background-color: " + color)">
                        @(position + 1)
                    </MudAvatar>
                    <div>
                        <MudText Typo="Typo.h6">
                            @ValueConverter(Ranking.Bests[position].Value)
                        </MudText>
                        @if (Ranking.Bests[position].Title is null)
                        {
                            <MudText Typo="Typo.body1">
                                @L["Deleted"]
                            </MudText>                        }
                        else
                        {
                            <MudLink Typo="Typo.body1" Href="@LinkBuilder(Ranking.Bests[position].Id)">
                                @Ranking.Bests[position].Title
                            </MudLink>                        }
                    </div>
                </div>
            }
        }
    </div>
    <div>
        <MudText Typo="Typo.h6">@L["Worsts"]</MudText>
        @if (Ranking.Worsts.Length == 0)
        {
            @L["NoDataYet"]
        }
        else
        {
            for (var i = 0; i < Ranking.Worsts.Length; i++)
            {
                var position = i;
                <div class="d-flex flex-row align-center mt-2">
                    <MudAvatar Square="false" Class="mr-2">
                        @(position + 1)
                    </MudAvatar>
                    <div>
                        <MudText Typo="Typo.h6">
                            @ValueConverter(Ranking.Worsts[position].Value)
                        </MudText>
                        @if (Ranking.Worsts[position].Title is null)
                        {
                            <MudText Typo="Typo.body1">
                                @L["Deleted"]
                            </MudText>                        }
                        else
                        {
                            <MudLink Typo="Typo.body1" Href="@LinkBuilder(Ranking.Worsts[position].Id)">
                                @Ranking.Worsts[position].Title
                            </MudLink>                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {

    [Parameter]
    public Ranking<TItem> Ranking { get; set; } = default!;

    [Parameter]
    public Func<TItem, string> ValueConverter { get; set; } = item => item?.ToString() ?? string.Empty;

    [Parameter]
    public Func<string, string> LinkBuilder { get; set; } = default!;

}