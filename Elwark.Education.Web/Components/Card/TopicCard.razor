@using Elwark.Education.Web.Gateways.Models.Content

<div class="mud-paper mud-elevation-1 grid">
    <div class="image" style="background-image: url('@Image')">
        <div class="cover">
            <div class="d-flex justify-end">
                <MudTooltip Placement="Placement.Start" Text="@(IsFavorite ? L["RemoveFromFavorite"] : L["AddToFavorite"])">
                    <MudToggleIconButton
                        Class="favorite"
                        Toggled="@IsFavorite"
                        ToggledChanged="@OnFavoriteChanged"
                        Icon="@Icons.Filled.FavoriteBorder"
                        Color="Color.Default"
                        Size="Size.Small"
                        ToggledIcon="@Icons.Filled.Favorite"
                        ToggledColor="Color.Error"
                        ToggledSize="Size.Small"/>
                </MudTooltip>
            </div>
            <div>
                @ImageFooter
            </div>
        </div>
    </div>
    <div class="pa-3">
        <MudLink Typo="Typo.subtitle1" Href="@Href" Class="d-block mb-3">
            <strong>@Title</strong>
        </MudLink>
        <MudText Typo="Typo.body2">
            @Subtitle
        </MudText>
    </div>
    <div class="d-flex flex-row justify-space-between align-center pa-3">
        <RatingStar Rating="@Rating"/>
        <MudButton
            Variant="Variant.Text"
            Color="Color.Primary"
            EndIcon="@Icons.Filled.ChevronRight"
            Link="@Href">
            @L["Read"]
        </MudButton>
    </div>
</div>

@code {

    [Inject]
    private IStringLocalizer<App> L { get; set; } = default!;
    
    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public string Image { get; set; } = string.Empty;

    [Parameter]
    public string Href { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Subtitle { get; set; } = string.Empty;

    [Parameter]
    public ContentRating Rating { get; set; } = default!;

    [Parameter]
    public bool IsFavorite { get; set; }

    [Parameter]
    public RenderFragment? ImageFooter { get; set; }

    [Parameter]
    public Func<string, Task<bool>> OnFavoriteClick { get; set; } = _ => Task.FromResult(false);

    private async Task OnFavoriteChanged(bool toggled) =>
        IsFavorite = await OnFavoriteClick.Invoke(Id);

}
