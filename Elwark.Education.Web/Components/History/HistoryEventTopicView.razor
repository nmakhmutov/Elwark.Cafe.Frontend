@using Elwark.Education.Web.Gateways.Models.History
@inject IDialogService Dialog
@inject IStringLocalizer<App> L

<div class="header">
    <div class="image">
        <img src="@Topic.Image" alt="@Topic.Title"/>
    </div>
</div>

<div class="title-grid">
    <div class="title">
        <MudText Typo="Typo.h2" Class="mb-3">
            @Topic.Title
        </MudText>
        <Breadcrumbs Items="@Breadcrumbs"/>
    </div>
    <div class="description">
        <HistoricalDateRangeText Range="@Topic.Dates" Class="mb-6"/>
        <MudText Typo="Typo.body1">
            @Topic.Description
        </MudText>
    </div>
    @if (Topic.Test is not null)
    {
        <div class="test-container">
            <TopicProgressBar Progress="@Topic.Test.Progress"/>
            <div class="d-flex flex-row justify-space-between mt-1">
                <div class="d-flex flex-row align-center">
                    @if (Topic.Test.Progress.ExamCompletedAt is not null)
                    {
                        <MudIcon Icon="@Outlined.CheckCircleOutlineOutlined" Style="@("color:" + Topic.Test.Progress.Color)"/>
                        <MudText Typo="Typo.body2" Class="ml-1">
                            @L.GetString("Exam:QuantityCompletedTimes", Topic.Test.Progress.QuantityCompletedTimes).
                            @L.GetString("Exam:LastCompletedAt", Topic.Test.Progress.ExamCompletedAt.Value.ToSimpleFormat())
                        </MudText>
                    }
                    else
                    {
                        <MudIcon Icon="@Outlined.RemoveCircleOutlineOutlined"/>
                        <MudText Typo="Typo.body2" Class="ml-1">
                            @L["Exam:NotPassed"]
                        </MudText>
                    }
                </div>
                <MudText Typo="Typo.body2">
                    @Topic.Test.Progress?.Percentage%
                </MudText>
            </div>
        </div>
    }
</div>

<MudContainer MaxWidth="MaxWidth.Large">
    @for (var i = 0; i < Topic.Articles.Length; i++)
    {
        var article = Topic.Articles[i];
        <div class="d-flex flex-column @(i % 2 == 0 ? "flex-sm-row" : "flex-sm-row-reverse") align-sm-center mb-6">
            @if (article.Image is not null)
            {
                <div class="article-image">
                    <img src="@article.Image" alt="@article.Title"/>
                </div>
            }
            <div class="article-content @(article.Image is null ? null : i % 2 == 0 ? "left" : "right") pa-6">
                @if (article.Permission.Type == ContentType.Premium)
                {
                    <MudText Typo="Typo.body2" Color="Color.Warning">
                        @article.Permission.Type
                    </MudText>
                }
                <div class="article-title">
                    <MudText Typo="Typo.h3">
                        @article.Title
                    </MudText>
                </div>
                @if (article.Subtitle is not null)
                {
                    <MudText Typo="Typo.body1">
                        @article.Subtitle
                    </MudText>
                }
                @if (article.Test is not null)
                {
                    <MudText Typo="Typo.body2">
                        <em>
                            @if (article.Test.Progress is null)
                            {
                                @L["Test:NotPassed"]
                            }
                            else
                            {
                                @L.GetString("Test:Passed",
                                    article.Test.Progress.QuantityCompletedTimes,
                                    article.Test.Progress.TestCompletedAt.ToSimpleFormat())
                            }
                        </em>
                    </MudText>
                }
                <div>
                    @if (article.Permission.IsAllowed)
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Link="@(Links.History.Article(article.Id))">
                            Learn more
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="@OpenSubscriptionDialog">
                            Learn more
                        </MudButton>
                    }
                </div>
            </div>
        </div>
    }
</MudContainer>

@code {

    [Parameter]
    public HistoryEventTopicDetail Topic { get; set; } = default!;

    [Parameter]
    public BreadcrumbsItem[] Breadcrumbs { get; set; } = Array.Empty<BreadcrumbsItem>();

    private void OpenSubscriptionDialog() => Dialog.Show<SubscriptionModal>(null, new DialogOptions {MaxWidth = MaxWidth.Large});

}