@using Elwark.Education.Web.Gateways.Models.History
@using Markdown = Markdig.Markdown
@inject IDialogService Dialog
@inject IStringLocalizer<App> L

<div class="header-grid mb-6">
    <div class="header-title">
        <Breadcrumbs Items="@Breadcrumbs" Class="mb-6"/>
        <MudText Typo="Typo.h2" Class="mb-6">
            @Topic.Title
        </MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-6">
            @Topic.Description
        </MudText>
        @if (Topic.Test is not null)
        {
            <div class="test-container">
                <TopicProgressBar Progress="@Topic.Test.Progress"/>
                <div class="d-flex flex-row justify-space-between mt-1">
                    <div class="d-flex flex-row align-center">
                        @if (Topic.Test.Progress.ExamCompletedAt is not null)
                        {
                            <MudIcon Icon="@Outlined.CheckCircleOutlineOutlined" Style="@("color:" + Topic.Test.Progress.Color)"/>
                            <MudText Typo="Typo.body2" Class="ml-1">
                                @L.GetString("Exam:QuantityCompletedTimes", Topic.Test.Progress.QuantityCompletedTimes).
                                @L.GetString("Exam:LastCompletedAt", Topic.Test.Progress.ExamCompletedAt.Value.ToSimpleFormat())
                            </MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@Outlined.RemoveCircleOutlineOutlined"/>
                            <MudText Typo="Typo.body2" Class="ml-1">
                                @L["Exam:NotPassed"]
                            </MudText>
                        }
                    </div>
                    <MudText Typo="Typo.body2">
                        @Topic.Test.Progress?.Percentage%
                    </MudText>
                </div>
            </div>
        }
    </div>
    <div class="header-image" style="background-image: url(@Topic.Image);"></div>
</div>

<div class="characteristics-grid ma-6">

    @foreach (var (title, value) in Topic.Characteristics)
    {
        <div>
            <MudText Typo="Typo.subtitle1" Color="Color.Inherit">
                @title
            </MudText>
            <MarkdownText Text="@value"/>
        </div>
    }
</div>

@for (var i = 0; i < Topic.Articles.Length; i++)
{
    var article = Topic.Articles[i];
    <div class="article @(i % 2 == 0 ? "flex-md-row" : "flex-md-row-reverse")">
        <div class="article-image-container">
            <div class="article-background @(i % 2 == 0 ? "left" : "right")"></div>
            <div class="image-container @(i % 2 == 0 ? "left" : "right")">
                <div class="article-image">
                    @if (article.Image is not null)
                    {
                        <img src="@article.Image" alt="@article.Title" style="width: 100%; height: 100%;">
                    }
                </div>
            </div>
        </div>
        <div class="article-content-container @(i % 2 == 0 ? null : "reverse")">
            <div class="article-text-container">
                @if (article.Permission.Type == ContentType.Premium)
                {
                    <MudText Typo="Typo.body2" Color="Color.Warning">
                        @article.Permission.Type
                    </MudText>
                }

                <MudText Typo="Typo.h3">
                    @article.Title
                </MudText>

                <MudText Typo="Typo.subtitle1">
                    @article.Subtitle
                </MudText>

                @if (article.Test is not null)
                {
                    <MudText Typo="Typo.body2">
                        <em>
                            @if (article.Test.Progress is null)
                            {
                                @L["Test:NotPassed"]
                            }
                            else
                            {
                                @L.GetString("Test:Passed",
                                    article.Test.Progress.QuantityCompletedTimes,
                                    article.Test.Progress.TestCompletedAt.ToSimpleFormat())
                            }
                        </em>
                    </MudText>
                }

                <div>
                    @if (article.Permission.IsAllowed)
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Link="@(Links.History.Article(article.Id))">
                            Learn more
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" OnClick="@OpenSubscriptionDialog">
                            Learn more
                        </MudButton>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public HistoryPersonTopicDetail Topic { get; set; } = default!;

    [Parameter]
    public BreadcrumbsItem[] Breadcrumbs { get; set; } = Array.Empty<BreadcrumbsItem>();

    private void OpenSubscriptionDialog() => Dialog.Show<SubscriptionModal>(null, new DialogOptions {MaxWidth = MaxWidth.Large});
}