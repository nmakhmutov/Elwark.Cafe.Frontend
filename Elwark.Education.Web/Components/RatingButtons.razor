<div class="rating @Class">
    <div class="d-flex flex-row align-center">
        <MudIconButton
            Icon="@Icons.Filled.ThumbUp"
            OnClick="@(Rating.IsLiked == true ? () => Task.CompletedTask : OnLike)"
            Color="@(Rating.IsLiked == true ? Color.Success : Color.Default)"/>
        <MudText Typo="Typo.body2">
            @Rating.Likes.ToReadable()
        </MudText>
    </div>

    <div class="d-flex flex-row align-center justify-end">
        <MudIconButton
            Icon="@Icons.Filled.ThumbDown"
            OnClick="@(Rating.IsLiked == false ? () => Task.CompletedTask : OnDislike)"
            Color="@(Rating.IsLiked == false ? Color.Error : Color.Default)"/>
        <MudText Typo="Typo.body2">
            @Rating.Dislikes.ToReadable()
        </MudText>
    </div>

    <div class="progress d-flex flex-row align-center">
        <MudProgressLinear Max="100" Value="@Rating.Ranking" Color="@Rating.Color" Class="w-100 mr-1"/>
        <MudText Typo="Typo.caption" Color="@Rating.Color">
            @Rating.Ranking%
        </MudText>
    </div>
</div>

@code {

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public UserContentRating Rating { get; set; } = default!;

    [Parameter]
    public Func<Task<bool>> OnLikeClick { get; set; } = () => Task.FromResult(false);

    [Parameter]
    public Func<Task<bool>> OnDislikeClick { get; set; } = () => Task.FromResult(false);

    private async Task OnLike()
    {
        if (await OnLikeClick())
        {
            var likes = Rating.Likes + 1;
            var dislikes = Rating.IsLiked.HasValue ? Rating.Dislikes - 1 : Rating.Dislikes;
            Rating = new UserContentRating(likes, dislikes, Math.Round(likes / (likes + (double) dislikes) * 100, 1), true);
        }
    }

    private async Task OnDislike()
    {
        if (await OnDislikeClick())
        {
            var likes = Rating.IsLiked.HasValue ? Rating.Likes - 1 : Rating.Likes;
            var dislikes = Rating.Dislikes + 1;
            Rating = new UserContentRating(likes, dislikes, Math.Round(likes / (likes + (double) dislikes) * 100, 1), false);
        }
    }

}
