@using Elwark.Education.Web.Gateways.Models.User
@inject IStringLocalizer<App> L

<div class="subscription">
    <div class="d-flex flex-row align-center">
        <SubjectIcon Subject="@Subscription.Subject" Size="@Size.Medium"/>
        <MudLink Typo="Typo.body1" Class="ml-2" Href="@Links.Subjects.Index(Subscription.Subject)">
            @L[Subscription.Subject.ToString()]
        </MudLink>
    </div>
    <div>
        @switch(Subscription.Type)
        {
            case SubscriptionType.Free:
                <MudChip Color="Color.Default" Size="Size.Small" Label="true" Class="ma-0">
                    @Subscription.Type
                </MudChip>
                <MudText @onclick="@(() => Console.WriteLine("DDD"))">Switch to premium</MudText>
                break;
                
            case SubscriptionType.Basic:
                <MudChip Color="Color.Secondary" Size="Size.Small" Label="true" Class="ma-0">
                    @Subscription.Type
                </MudChip>
                <MudText Typo="Typo.body2">
                    @L["SubscriptionEndsAt"] @Subscription.ExpiredAt?.ToSimpleFormat()
                </MudText>
                break;
                
            case SubscriptionType.Advanced:
                <MudChip Color="Color.Warning" Size="Size.Small" Label="true" Class="ma-0">
                    @Subscription.Type
                </MudChip>
                <MudText Typo="Typo.body2">
                    @L["SubscriptionEndsAt"] @Subscription.ExpiredAt?.ToSimpleFormat()
                </MudText>
                break;
        }
    </div>
    <div class="restriction">
        <MudText Typo="Typo.h6">
            @(Subscription.TestCreating.Quantity < 0 ? "∞" : Subscription.TestCreating.Quantity)
        </MudText>
        <MudText Typo="Typo.body1">
            Tests you can create now
        </MudText>
        @if (Subscription.TestCreating.RestoreAt.HasValue)
        {
            <MudText Typo="Typo.caption">
                <em>Default value will be restored at @Subscription.TestCreating.RestoreAt.Value.ToSimpleFormat()</em>
            </MudText>
        }
    </div>
    <div class="restriction">
        <MudText Typo="Typo.h6">
            @(Subscription.TestAnswering.Quantity < 0 ? "∞" : Subscription.TestAnswering.Quantity)
        </MudText>
        <MudText Typo="Typo.body1">
            Mistakes you can make in tests
        </MudText>
        @if (Subscription.TestAnswering.RestoreAt.HasValue)
        {
            <MudText Typo="Typo.caption">
                <em>Default value will be restored at @Subscription.TestAnswering.RestoreAt.Value.ToSimpleFormat()</em>
            </MudText>
        }
    </div>
    <div class="buttons">
        <MudTooltip Text="@L["Statistics"]">
            <MudIconButton Link="@(Links.Profile.Statistics(Subscription.Subject))" Icon="@Filled.BarChart"/>
        </MudTooltip>
        <MudTooltip Text="@L["Tests"]">
            <MudIconButton Link="@(Links.Profile.Tests(Subscription.Subject))" Icon="@Filled.Class"/>
        </MudTooltip>
    </div>
</div>

@code {

    [Parameter]
    public Subscription Subscription { get; set; } = default!;

}