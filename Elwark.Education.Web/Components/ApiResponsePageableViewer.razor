@typeparam T
@inject IStringLocalizer<App> L

@switch (_response.Status)
{
    case ResponseStatus.Loading:
        <Title Value="@L["Loading"]"></Title>
        @Loading
        break;

    case ResponseStatus.Fail:
        <Title Value="@_response.Error.Title"></Title>
        <ErrorPage Error="_response.Error"/>
        break;

    case ResponseStatus.Success:
        var target = $"target-{Guid.NewGuid()}";
        <InfinityScroll ObserverTargetId="@target" ObservableTargetReached="@LoadMoreAsync">
            @Result(_response.Data.Items)
            <div id="@target" class="d-flex justify-center my-6">
                @if (_response.Data.Token is not null)
                {
                    <MudProgressCircular Indeterminate="true"/>
                }
            </div>
        </InfinityScroll>
        break;
}

@code {
    private ApiResponse<PageResponse<T>> _response = ApiResponse<PageResponse<T>>.Loading();

    [Parameter]
    public Func<string?, Task<ApiResponse<PageResponse<T>>>> Loader { get; set; } = default!;

    [Parameter]
    public RenderFragment Loading { get; set; } = default!;

    [Parameter]
    public RenderFragment<T[]> Result { get; set; } = default!;

    protected override async Task OnParametersSetAsync() =>
        _response = await Loader(null);

    private async Task LoadMoreAsync()
    {
        if (_response.Data.Token is null)
            return;

        var result = await Loader(_response.Data.Token);
        
        _response = result.Status switch
        {
            ResponseStatus.Success =>
                ApiResponse<PageResponse<T>>.Success(
                    new PageResponse<T>(_response.Data.Items.Union(result.Data.Items).ToArray(), result.Data.Token)
                    ),
                    
            _ => _response
            };
    }

}
