@inject IStringLocalizer<App> L

<div class="grid @Class">
    <div>
        <div class="d-flex flex-row justify-center align-end">
            <MudText Typo="Typo.h3">
                @Test.Progress.CompletedArticles
            </MudText>
            <MudText Typo="Typo.subtitle1">
                /@Test.Progress.TotalArticles
            </MudText>
        </div>
        <MudProgressLinear Minimum="0" Maximum="100" Color="Color.Primary" Value="@Test.Progress.Percentage" Class="mb-2"/>
        <div class="d-flex flex-row justify-space-between mb-3">
            <MudText Typo="Typo.body2" Class="mb-2">
                <strong>@L["Progress"]</strong>
            </MudText>
            <MudText Typo="Typo.body2" Class="mb-2">
                @Test.Progress.Percentage%
            </MudText>
        </div>

        <CreateTestButton
            Subject="@SubjectType.History"
            Status="@Test.Status"
            IsLoading="@IsTestLoading"
            OnCreateTestClick="@OnCreateTestClick"/>

        <div class="d-flex flex-row flex-wrap justify-space-between">
            @if (Test.Progress.CompletedTimes.Success > 0)
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Class="mt-3">
                    @L["Exam:PassedTimes", Test.Progress.CompletedTimes.Success.ToReadable()]
                </MudText>
            }
            @if (Test.Progress.CompletedTimes.Fail > 0)
            {
                <MudText Align="Align.Center" Typo="Typo.subtitle1" Class="mt-3">
                    @L["Exam:NotPassedTimes", Test.Progress.CompletedTimes.Fail.ToReadable()]
                </MudText>
            }
        </div>
    </div>

    @foreach (var conclusion in Test.Conclusions)
    {
        <TestConclusionOverviewItem
            Conclusion="@conclusion"
            DetailLinkBuilder="@(id => Links.Profile.TestDetail(SubjectType.History, id))"/>
    }
</div>

@code {

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public TopicTest Test { get; set; } = default!;

    [Parameter]
    public bool IsTestLoading { get; set; }

    [Parameter]
    public EventCallback OnCreateTestClick { get; set; }

}
