@using Elwark.Education.Web.Gateways.Models.Test
@inject IStringLocalizer<App> L
@inject ErrorManager ErrorManager
@inject IDialogService Dialog

<div class="grid @Class">
    @switch (Status)
    {
        case TestStatus.Allowed:
            foreach (var testType in TestTypes)
            {
                <MudButton
                    Variant="Variant.Filled"
                    Disabled="@IsLoading"
                    Color="@GetButtonColor(testType)"
                    OnClick="@(() => OnTestClick(testType))">
                    @if (testType == _testType)
                    {
                        <div class="d-flex flex-row align-center">
                            <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                            @L["Loading"]
                        </div>
                    }
                    else
                    {
                        @L[$"Test:{testType}"]
                    }
                </MudButton>
            }
            break;

        case TestStatus.TestCreationMaximum:
        case TestStatus.AnswerCreationMaximum:
            <div class="full-row">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    @ErrorManager.Localize(Status)
                </MudText>
            </div>
            <div class="full-row centered-row">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnBuyClick">
                    @L["Subscription:PricingPlan"]
                </MudButton>
            </div>
            break;

        case TestStatus.CurrentTestsMaximum:
            <div class="full-row">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    @ErrorManager.Localize(Status)
                </MudText>
            </div>
            <div class="full-row centered-row">
                <MudButton Variant="Variant.Filled" Link="@Links.Profile.Index" Color="Color.Primary">
                    @L["Profile"]
                </MudButton>
            </div>
            break;

        default:
            <div class="full-row">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    @ErrorManager.Localize(Status)
                </MudText>
            </div>
            break;
    }
</div>

@code {
    private TestType? _testType;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public TestStatus Status { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public SubjectType Subject { get; set; }

    [Parameter]
    public TestType[] TestTypes { get; set; } = Array.Empty<TestType>();

    [Parameter]
    public EventCallback<TestType> OnCreateTestClick { get; set; }

    protected override void OnParametersSet()
    {
        if (IsLoading == false && _testType.HasValue)
            _testType = null;
    }

    private async Task OnTestClick(TestType testType)
    {
        _testType = testType;
        await OnCreateTestClick.InvokeAsync(testType);
    }

    private void OnBuyClick()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            NoHeader = true,
            CloseButton = false,
            FullWidth = true
        };
        var parameters = new DialogParameters
        {
            [nameof(SubscriptionModal.SubjectType)] = Subject
        };

        Dialog.Show<SubscriptionModal>(null, parameters, options);
    }

    private Color GetButtonColor(TestType testType) =>
        testType switch
        {
            TestType.Easy => Color.Primary,
            TestType.Hard => Color.Tertiary,
            _ => throw new ArgumentOutOfRangeException(nameof(testType), testType, null)
            };
}

