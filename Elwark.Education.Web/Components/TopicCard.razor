@inject IStringLocalizer<App> L

<div class="mud-paper mud-elevation-1 grid">
    <div class="image" style="background-image: url('@Image')"></div>
    <div class="pa-3">
        <MudLink Typo="Typo.subtitle1" Href="@Href">
            @Title
        </MudLink>
        <MudText Typo="Typo.body2">
            @Subtitle
        </MudText>
    </div>
    <div class="progress px-3">
        <div>
            @if (Progress is not null)
            {
                <MudText Typo="Typo.body2" Class="mb-2">
                    @L["Progress"] <strong>@Progress.Percentage%</strong>
                </MudText>
                <MudProgressLinear Minimum="0" Maximum="100" Color="Color.Primary" Value="@Progress.Percentage"/>
            }
        </div>
        <MudDivider Vertical="true" Class="mx-3"/>
        <div>
            <MudText Typo="Typo.body2">
                <strong>@Rating.Ranking</strong>
            </MudText>
            <MudText Typo="Typo.body2">@L["Rating"]</MudText>
        </div>
    </div>
    <div class="d-flex flex-row justify-space-between align-center pa-3">
        <MudTooltip Text="@(IsFavorite ? L["RemoveFromFavorite"] : L["AddToFavorite"])">
            <MudToggleIconButton
                Toggled="@IsFavorite"
                ToggledChanged="@OnFavoriteChanged"
                Icon="@Icons.Filled.Favorite"
                Color="Color.Default"
                ToggledIcon="@Icons.Filled.Favorite"
                ToggledColor="Color.Error"/>
        </MudTooltip>
        <MudButton
            Variant="Variant.Text"
            Color="Color.Primary"
            EndIcon="@Icons.Filled.ChevronRight"
            Link="@Href">
            @L["Read"]
        </MudButton>
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public string Image { get; set; } = string.Empty;

    [Parameter]
    public string Href { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Subtitle { get; set; } = string.Empty;

    [Parameter]
    public ContentRating Rating { get; set; } = default!;

    [Parameter]
    public TopicProgress? Progress { get; set; }

    [Parameter]
    public bool IsFavorite { get; set; }

    [Parameter]
    public Func<string, Task<bool>> OnFavoriteClick { get; set; } = s => Task.FromResult(false);

    private async Task OnFavoriteChanged(bool toggled) => 
        IsFavorite = await OnFavoriteClick.Invoke(Id);

}
