@using Elwark.Education.Web.Gateways.Models.Test
@using MudBlazor.Extensions
@inject IStringLocalizer<App> L

<EditForm Model="@_answer" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator/>
    <div class="form-grid">
        <MudText Typo="Typo.h6" Align="Align.Center" class="mb-3">
            @Question.Title
        </MudText>
        @if (Question.Image is not null)
        {
            <img class="question-image mb-3" src="@Question.Image" alt="@Question.Title"/>
        }

        @switch (Question.Type)
        {
            case QuestionType.TextAnswer:
                <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                    @switch (AnswerResult)
                    {
                        case null:
                            <MudTextField Label="@L["Test:YourAnswer"]" @bind-Value="@_answer.TextAnswer"
                                          For="@(() => _answer.TextAnswer)"/>
                            break;

                        case TextAnswerResult answer:
                            <MudTextField Label="@L["Test:YourAnswer"]" Value="@_answer.TextAnswer" Disabled="true"/>
                            <MudText Typo="Typo.subtitle2" Color="@(answer.IsAnswerCorrect ? Color.Success : Color.Error)">
                                @answer.Text
                            </MudText>
                            break;
                    }
                </MudContainer>
                break;

            case QuestionType.SingleAnswer:
                <div class="options-grid">
                    <MudRadioGroup @bind-SelectedOption="@_answer.SingleAnswer">
                        @foreach (var option in Question.Options)
                        {
                            var (icon, color) = AnswerResult switch {
                                SingleAnswerResult x when option.Number == x.Number => 
                                    (Icon: Icons.Filled.Check , Color: Color.Success),
                                
                                SingleAnswerResult {IsAnswerCorrect: false} when option.Number == _answer.SingleAnswer => 
                                    (Icon: Icons.Filled.Clear , Color: Color.Error),
                                    
                                _ => (Icon: null, Color: Color.Default)
                                };

                            <div class="d-flex flex-row align-center">
                                @if (icon is null)
                                {
                                    <span style="width: 24px">&nbsp;</span>
                                }
                                else
                                {
                                    <MudIcon Icon="@icon" Color="@color"/>
                                }
                                <MudRadio Disabled="@(AnswerResult != null)" Color="Color.Primary" Option="@option.Number">
                                    @switch (option.Type)
                                    {
                                        case AnswerOptionType.Text:
                                            <MudText Typo="Typo.body1">
                                                @option.Value
                                            </MudText>
                                            break;

                                        case AnswerOptionType.Image:
                                            <div class="answer-image-container">
                                                <img class="answer-image" src="@option.Value" alt="@Question.Title"/>
                                            </div>
                                            break;
                                    }
                                </MudRadio>
                            </div>
                        }
                    </MudRadioGroup>
                </div>
                break;

            case QuestionType.ManyAnswers:
                <div class="options-grid">
                    @foreach (var option in Question.Options)
                    {
                        var (icon, color) = AnswerResult switch {
                            ManyAnswersResult x when x.Numbers.Contains(option.Number) => 
                                (Icon: Icons.Filled.Check , Color: Color.Success),
                                                
                            ManyAnswersResult {IsAnswerCorrect: false} when _answer.ManyAnswer.Contains(option.Number) => 
                                (Icon: Icons.Filled.Clear , Color: Color.Error),
                                                    
                            _ => (Icon: null, Color: Color.Default)
                            };

                        <div class="d-flex flex-row align-center">
                            @if (icon is null)
                            {
                                <span style="width: 24px">&nbsp;</span>
                            }
                            else
                            {
                                <MudIcon Icon="@icon" Color="@color"/>
                            }
                            <MudCheckBox
                                Checked="@(_answer.ManyAnswer.Contains(option.Number))"
                                CheckedChanged="@((bool b) => { if (b) {_answer.ManyAnswer.Add(option.Number); } else _answer.ManyAnswer.Remove(option.Number);})"
                                Disabled="@(AnswerResult != null)"
                                Color="Color.Primary">
                                @switch (option.Type)
                                {
                                    case AnswerOptionType.Text:
                                        <MudText Typo="Typo.body1">
                                            @option.Value
                                        </MudText>
                                        break;

                                    case AnswerOptionType.Image:
                                        <div class="answer-image-container">
                                            <img class="answer-image" src="@option.Value" alt="@Question.Title"/>
                                        </div>
                                        break;
                                }
                            </MudCheckBox>
                        </div>
                    }
                </div>
                break;

            case QuestionType.SortedAnswers:
                break;

            default:
                throw new ArgumentOutOfRangeException(nameof(Question.Type), Question.Title, null);
        }

        <div class="mx-auto">
            @switch (_answerState)
            {
                case AnswerState.Answer:
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                        @L["Test:Answer"]
                    </MudButton>
                    break;

                case AnswerState.Answering:
                    <MudButton Variant="Variant.Filled" Disabled="true">
                        <div class="d-flex flex-row align-center">
                            <MudProgressCircular Class="mr-3" Size="Size.Small" Indeterminate="true"/>
                            @L["Loading"]
                        </div>
                    </MudButton>
                    break;

                case AnswerState.Next:
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnNextClick">
                        @(AnswerResult?.IsTestComplete == true ? L["Test:Result"] : L["Test:Next"])
                    </MudButton>
                    break;
            }
        </div>

        @if (AnswerResult is null)
        {
            <MudText Typo="Typo.subtitle2" Align="Align.Center" Color="@Color.Error">
                <ValidationMessage For="@(() => _answer.SingleAnswer)"/>
                <ValidationMessage For="@(() => _answer.ManyAnswer)"/>
            </MudText>
        }
        else
        {
            if (AnswerResult.IsAnswerCorrect)
            {
                <MudText Typo="Typo.subtitle2" Align="Align.Center" Color="@Color.Success">
                    @L["Test:CorrectAnswer"]
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.subtitle2" Align="Align.Center" Color="@Color.Error">
                    @L["Test:IncorrectAnswer"]
                </MudText>
            }
        }
    </div>
</EditForm>

@code {

    private AnswerModel _answer = new();
    private AnswerState _answerState = AnswerState.Answer;

    [Parameter]
    public TestQuestionModel Question { get; set; } = default!;

    [Parameter]
    public TestAnswerResult? AnswerResult { get; set; }

    [Parameter]
    public EventCallback<TestAnswer> OnAnswer { get; set; }

    [Parameter]
    public EventCallback OnNext { get; set; }

    protected override void OnParametersSet()
    {
        if (Question.Type != _answer.QuestionType)
            _answer = _answer with{QuestionType = Question.Type};
    }

    private async Task OnValidSubmit(EditContext context)
    {
        _answerState = AnswerState.Answering;
        TestAnswer answer = _answer.QuestionType switch {
            QuestionType.TextAnswer => new TextAnswer(_answer.TextAnswer),
            QuestionType.SingleAnswer => new SingleAnswer(_answer.SingleAnswer),
            QuestionType.ManyAnswers => new ManyAnswer(_answer.ManyAnswer),
            QuestionType.SortedAnswers => new ManyAnswer(_answer.ManyAnswer),
            _ => throw new ArgumentOutOfRangeException(nameof(_answer.QuestionType))
            };
        
        await OnAnswer.InvokeAsync(answer);
        _answerState = AnswerState.Next;
    }

    private async Task OnNextClick()
    {
        await OnNext.InvokeAsync();
        _answer = new AnswerModel {QuestionType = Question.Type};
        _answerState = AnswerState.Answer;
    }

}