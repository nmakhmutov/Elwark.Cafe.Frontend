@using Elwark.Education.Web.Gateways.Models.TestConclusion
@inject IStringLocalizer<App> L

<div class="@Class">
    @foreach (var conclusion in Conclusions)
    {
        <ul class="mb-6">
            <li class="d-flex flex-row justify-space-between underline mb-1">
                <ConclusionStatusChip Status="@conclusion.Status" IsOnlyText="true"/>
            </li>
            <li class="d-flex flex-row justify-space-between underline mb-1">
                <MudText Typo="Typo.subtitle1">
                    @L["Date"]
                </MudText>
                <MudText Typo="Typo.subtitle1">
                    @conclusion.CompletedAt.ToSimpleFormat()
                </MudText>
            </li>
            <li class="d-flex flex-row justify-space-between underline mb-1">
                <MudText Typo="Typo.subtitle1">
                    @L["Score"]
                </MudText>
                <MudText Typo="Typo.subtitle1">
                    @conclusion.TotalScore.ToReadable()
                </MudText>
            </li>
            <li class="d-flex flex-row justify-space-between underline mb-1">
                <MudText Typo="Typo.subtitle1">
                    @L["TimeSpent"]
                </MudText>
                <MudText Typo="Typo.subtitle1">
                    @conclusion.TimeSpent.ToSimpleFormat()
                </MudText>
            </li>
            <li class="d-flex flex-row justify-end mb-1">
                <MudLink Href="@DetailLinkBuilder(conclusion.TestId)">
                    @L["Detail"]
                </MudLink>
            </li>
        </ul>
    }
    <div class="d-flex flex-row justify-end">
        <MudLink Color="Color.Primary" Href="@SeeAllLink">
            @L["SeeAll"]
        </MudLink>
    </div>
</div>

@code {

    [Parameter]
    public TestConclusionOverview[] Conclusions { get; set; } = Array.Empty<TestConclusionOverview>();

    [Parameter]
    public string SeeAllLink { get; set; } = string.Empty;

    [Parameter]
    public Func<string, string> DetailLinkBuilder { get; set; } = _ => string.Empty;

    [Parameter]
    public string? Class { get; set; }

}
