@using Elwark.Education.Web.Gateways.Models.History
@inject UrlsOptions Options;
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject IStringLocalizer<App> L

<MudNavMenu Class="navmenu">
    <AuthorizeView>
        <Authorized>
            <MudNavLink Icon="@Filled.DonutLarge" Href="@Links.Profile.Index">
                @L["Profile"]
            </MudNavLink>
            <MudNavLink Icon="@Filled.Person" Href="@(Options.Account.ToString())">
                @L["ElwarkAccount"]
            </MudNavLink>
            <MudDivider DividerType="DividerType.Middle" Class="ma-3"/>
        </Authorized>
    </AuthorizeView>

    <MudNavGroup
        Title="@L["History"]"
        Expanded="@(_subject == Subject.History)"
        Icon="@Subject.History.GetIcon()"
        ExpandIcon="@Filled.ExpandMore">
        @foreach (var (link, title) in _historyPages)
        {
            <MudNavLink Href="@link">
                @title
            </MudNavLink>
        }
    </MudNavGroup>

    <AuthorizeView>
        <Authorized>
            <MudAppBarSpacer/>
            <MudButton Variant="Variant.Text" StartIcon="@(Filled.Login)" OnClick="@BeginSignOut">
                @L["LogOut"]
            </MudButton>
        </Authorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private Subject _subject;

    private Dictionary<string, string> _historyPages = new();

    protected override void OnInitialized()
    {
        var path = $"/{Navigation.ToBaseRelativePath(Navigation.Uri)}";
        if (path.StartsWith(Links.History.Index))
            _subject = Subject.History;

        _historyPages = Enum.GetValues<HistoryPeriodType>()
            .ToDictionary(Links.History.Period, x => L[x.ToString()].Value);
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

}